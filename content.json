{"pages":[{"title":"","text":"google-site-verification: google20682a33ecfb689b.html","link":"/google20682a33ecfb689b.html"}],"posts":[{"title":"在 Cloudflare 使用 Page Rules 重定向域名","text":"前言其实之前写的是用 Plesk 面板做重定向的，但考虑到 .tk 域名以后是不会再用的，保留其实是为了搜索引擎做跳转 Plesk 面板有流量限制（虽然我不可能被打） 上了熊大免费的面板，如果被打的话，很不好意思 此外，直接添加 .tk 到 CF，其实是可以添加解析的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。Cloudflare 更新 Global API 已经一个月，如果他们想修复，是很容易的。但论坛中的工作人员没有做出回应（回复超过自己权限范围肯定不算回复啦），看这样子是拒绝白嫖党了。 步骤1 删除之前在 Partner 中添加的域名，重新在 Dashboard 中添加域名。 2 更改 Freenom NameServer 地址为 Cloudflare 给出的地址。 3 等。 4 在 DNS 中添加一个 CNAME 记录，指向自己的新域名。 5 Page Rules 中创建 blog.sandinok.tk/* , 选择 Forwarding URL 301 地址填入 https://suu.pp.ua/, 再启用就好了。记得最后的 / 一定要加上。 结果使用 http 和 https 均能正常跳转到新的域名，且子域名完全对应之前的。搜索引擎爬虫效果未知。 后记讲真，免费的 TLDs 就那么几个， CF 还直接禁止 API 了，国内国外的网友都很难受。论坛中的外国网友提供了几个解决方法，然而都是需要钱的。一个月 20 刀去买一个 Pro 套餐？真是方向错了。如果这样的情况继续发展的话，可能那些免费的 SLDs 也会被禁用了。","link":"/posts/37141/"},{"title":"通过 301 重定向，把 .tk 域名重定向到新域名","text":"前言继上一篇的 Cloudflare 拒绝 .tk 等一系列免费域名（好像真的有付费的 .tk, 但我没见过）之后，我决定扔掉 .tk 了。当然，像我这么穷的人，自然又去找了免费域名 .pp.ua, 来自乌克兰的免费域名，同时又去申请了 .eu.org 的域名。搞笑的是，.pp.ua 直接全域被加入到广告网站屏蔽列表里了，申请之后打不开，是排除到后来才发现的。在等待 .eu.org 域名获批前，暂时用着 .pp.ua 域名好了。 这篇文是通过更改 DNS NameServer 提供商，使用 URL Redirect (Permanent / 301) 来到达把旧域名重新定位到新的域名上，尽量减少搜索引擎蜘蛛访问错误而降权（其实也没几个访问）。 更新：直接添加 .tk 到 CF，是可以使用的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。 尝试好累啊，不想写了。用表格吧。 提供商 能否接入 .tk 免费 URL Redirect (301) DNSPod √ √ 要备案 DNSPod 国际版 × (验证邮箱收不到，传闻国际版团队被砍了) ? ? NameSilo × (没在他家买) ? ? HE.net × ? ? NameCheap √ √ √ DNS.com √ √ × 阿里云 √ √ 要备案 综上，使用 NameCheap 接入即可。 步骤1 NameCheap–Domains–FreeDNS 输入域名，Get DNS 2 Freenom–Client Area–Management Tools–Use custom nameservers (enter below)–输入 NameCheap 提供的地址（即 freedns[1到5].registrar-servers.com） 3 等 4 NameCheap Dashboard–Domain List–All Products–MANAGE–Advanced DNS 5 添加如下，以我自己为例，需要 blog.sandinok.tk 跳转到 suu.pp.ua Type Host Value TTL URL Redirect Record blog https://suu.pp.ua/ Permanent (301) 注意： 如果你想让你博客子页面（比如 /2020/02/23/page.html）自动跳转的话，一定在后面加上 / 这个符号。否则所有页面均跳转到主页面。此外通配符的跳转设定可以查看 NameCheap 的说明。还有，301 302 masked 三种重定向有区别，自行按需调整。 结果访问 http://blog.sandinok.tk 可以跳转到新的博客地址，而使用 https 则不行。对搜索引擎效果暂时未知。","link":"/posts/13996/"},{"title":"为学医的同学推荐几个应用","text":"因本人这学期开始上解剖课了，而课本上的插图不仅是2D的，而且还是黑白的，so confusing~遂找了一下关于解剖的APP。 国产的有3DBody，国外的Visible Body做得很好，当然还有别的，但不准备找了。 3DBody没有深入使用过，借了同学的手机来用了一下，骨骼没有质感，功能也不够丰富，而看别人的评论，说缺少一些部分，遂放弃。 下面就是关于Visible Body的了。 平台：iOS/Android/PC/Mac（iPad才是绝配啊，可惜真的没钱） 价格：大概每款都是25刀吧 所以这里的就是开心版了，只有安卓最新版本和PC的2014年的版本 （PC的真的是找不到了） 打折后宝宝买了一份windows版本的，中文支持度很好，但感觉界面就是照搬ipad的。。。 更新1.0：在ios端，大家可以在AppStore里面看到最新版本号，然后在谷歌搜索就好了，有很多共享账号的，当然你也可以在淘宝咸鱼拼多多去买共享账号，只是下载了就不会包更新。不如等到打折几块钱自己买。 (Android)Human Anatomy Atlas版本：2017.1.39 支持简体中文 （患者宣传动画无法解锁，我手机显示了购买，然而打不开动画） 有模型，有小视频，动图，测试，功能很全面。 (Android)Muscle Premium版本：6.1.31 支持简体中文 (Android)Anatomy and Physiology版本：4.1.16 支持简体中文 生理部分很形象，如果我高中能有这款应用该多好。 (PC)Human Anatomy Atlas版本：3.0.1 英文 这个就不截图了，旧版的不如不用，直接买正版多好。 但我还是上传了，有一定的参考价值。 使用说明1.安装APK文件 2.解压压缩包 3.把压缩包转移到 /android/obb 里面（文件夹也一起哦，有的话就覆盖） 4.阅读应用内说明 链接百度，嗯，和谐了可以留个言。 链接: https://pan.baidu.com/s/1jImfgeq 密码: ejun 以上是过时的了，更新的我就不上传网盘了，链接在这。 顺带前几天有0.99刀的Google Play的特价，垃圾浦发不让我买。","link":"/posts/29019/"},{"title":"白嫖党的大溃败","text":"Cloudflare 拒绝了免费域名1You cannot use this API for domains with a .cf, .ga, .gq, .ml, or .tk TLD (top-level domain). To configure (truncated...) 我的 .tk 域名不能在 Cloudflare 添加解析了，大溃败。 又错过了 5 刀 10 年的 .xyz. 现在只能去嫖一年的 .me 或者 .tech 了。 有钱真好，我也想有钱。","link":"/posts/55905/"},{"title":"删除、修改一些文章","text":"有说随着人类的开发，地球上无人的地方越来越少，亚马逊森林被也大片破坏，北极、南极动物家园尽丧。我忧思重重却无能为力。难道以后要有个动物园叫做“地球动物园”么？","link":"/posts/52400/"},{"title":"注册外国图书馆电子读者证(e-card)以使用其电子资源","text":"前言闲暇时，我总是戴上耳机，边听梁文道的“八分”，边漫步在河边。某日听到他提及关于香蕉的纪录片，又提到了 Kanopy 这个视频媒体平台可以观看，遂上网找寻。在满足看纪录片的需求后，贪婪心驱使，我继续查找可以使用 Kanopy 的渠道，于是这篇文章便产生了。 需知，我们并不是他国纳税人，也没有为当地做出什么贡献，本质上是无权享受他国图书馆的。然而这是理想状况下所思考之事。咱处在当前社会，就是“拿来主义”横行。正义是出殡葬歌，法律是提线木偶。更何况，读书人的事能叫偷吗？ 开宗明义本篇以 Los Angeles Public Library 的电子读者证(e-card)申领及注册使用 Kanopy, Hoopla 和 Libby 作为示例，可以说是简单直白的。若注册其他地方图书馆，流程应大致相同。（感叹一句大城市资源就是丰富） 步骤访问图书馆网站找到电子读者证页面阅读相关规定适用人群有哪些访问权限有哪些有效期是多久用爱跨越太平洋喊出一句: Hello, world.着陆于布达佩斯大饭店。 开始注册KanopyHooplaLibby总结为中华之崛起而读书，羞愧，余未做到。愿以此文助同道者开眼界，攀高峰。 测试的图书馆如下 图书馆 Kanopy 部/月 Hoopla 部/月 Libby 本(借阅/预定) Los Angeles Public Library 9 15 30/15 Boston Public Library 8 12 10/10 Ajax Public Library 15 15 20/999 Berkeley Public Library 10 10 10/12 Chicago Public Library × 6 10/5 参考文章","link":"/posts/50645/"},{"title":"Got something to say","text":"Obv,这是个博客啦。好不容易又有了博客，之前的两个已经找不到了，现在这个在GitHub上面，应该倒是不至于被收回了。 然后，准备用博客记录些东西，都是自己感兴趣的。 未来的博客呢，应该是有几个阶段的。 Stage 0 备忘 Memo呃，虽然看起来有点奇怪，但我记忆不是很好，还是需要一个载体来记载我的杂七杂八的想法。以免以后回忆过去的时候什么都记不起来了。 Stage 1 摄取 Intake此阶段主要在于搜集各种知识，毕竟个人的成长就是知识搜集的过程。为了绿色节能环保等各种名义，勉强就用打字来替代了。 Stage 2 整理 Settle吸收、消化所搜集的知识。自然界是有能量传递效率的，可如若于知识的话，不应该局限于100%。自当最大限度地去学习与超越。 Stage 3 输出 Output兴趣的实质是不懈的追求，而乐趣却是在过程之中获得的，结果不是很重要。于巴菲特、盖茨等富豪，做善事，是致力于世界的公平，可在互联网这个地方，并没有现实之中的阶级、贫富之分，公平与分享是其精神。每个人都有这个权利去获取相应的信息。对知识丰富的人，传播知识本就是发扬并传播互联网精神。而对个人而言，木桶满则溢，溢出的则是相对于旧知识的新知识。win-win很美好，至少在此它应该存在。 附由于自己尚且未摸清hexo的全部玩法，经常会GG掉，所以博客有什么奇怪的，都是正常现象。","link":"/posts/36450/"},{"title":"索尼Z3+刷Lineage后无法使用电信4G的解决方法","text":"背景之前忍受不了官方固件的臃肿，试过Lineage，但却发现并不能支持电信4G，于是匆忙放弃。 而现在是真的忍不了了，恰好Lineage有官方支持了，所以刷了一个继续用。 但是依旧是不支持4G，开机从有信号闪了一下就是空白了。所以搜索了一下资料，发现了有人解决了Lineage的问题，所以这里是搬运一下而已。实质上是锁定SIM卡的网络制式。 需要的东西Root权限 RE浏览器(或者类似能获取Root编辑权限的软件) 操作定位到/system/build.prop，编辑，找到ro.telephony.default_network,当然，如果没有就自己创建一个。 格式：ro.telephony.default_network=卡一网络,卡二网络 例如：ro.telephony.default_network=11,1 而我用的是电信4G+移动2G，所以上面的参数就这样设定。 关于数字代表的网络如下。 NETWORK_MODE_WCDMA_PREF = 0; /* GSM/WCDMA (WCDMA 优先) */ NETWORK_MODE_GSM_ONLY = 1; /* 仅GSM */ NETWORK_MODE_WCDMA_ONLY = 2; /* 仅WCDMA */ NETWORK_MODE_GSM_UMTS = 3; /* GSM/WCDMA (通过PRL的自动模式) 可在设置菜单里选择*/ NETWORK_MODE_CDMA = 4; /* CDMA and EvDo (通过PRL的自动模式) 可在设置菜单里选择*/ NETWORK_MODE_CDMA_NO_EVDO = 5; /* 仅CDMA */ NETWORK_MODE_EVDO_NO_CDMA = 6; /* 仅EvDo */ NETWORK_MODE_GLOBAL = 7; /* GSM/WCDMA, CDMA, and EvDo (通过PRL的自动模式) 可在设置菜单里选择*/ NETWORK_MODE_LTE_CDMA_EVDO = 8; /* LTE, CDMA and EvDo */ NETWORK_MODE_LTE_GSM_WCDMA = 9; /* LTE, GSM/WCDMA */ NETWORK_MODE_LTE_CMDA_EVDO_GSM_WCDMA = 10; /* LTE, CDMA, EvDo, GSM/WCDMA */ NETWORK_MODE_LTE_ONLY = 11; /* 仅LTE */ NETWORK_MODE_LTE_WCDMA = 12; /* LTE/WCDMA */ NETWORK_MODE_TD_SCDMA_ONLY = 13; /* 仅TD-SCDMA */ NETWORK_MODE_TD_SCDMA_WCDMA = 14; /* TD-SCDMA and WCDMA */ NETWORK_MODE_TD_SCDMA_LTE = 15; /* TD-SCDMA and LTE */ NETWORK_MODE_TD_SCDMA_GSM = 16; /* TD-SCDMA and GSM */ NETWORK_MODE_TD_SCDMA_GSM_LTE = 17; /* TD-SCDMA,GSM and LTE */ NETWORK_MODE_TD_SCDMA_GSM_WCDMA = 18; /* TD-SCDMA, GSM/WCDMA */ NETWORK_MODE_TD_SCDMA_WCDMA_LTE = 19; /* TD-SCDMA, WCDMA and LTE */ NETWORK_MODE_TD_SCDMA_GSM_WCDMA_LTE = 20; /* TD-SCDMA, GSM/WCDMA and LTE */ NETWORK_MODE_TD_SCDMA_CDMA_EVDO_GSM_WCDMA = 21; /*TD-SCDMA,EvDo,CDMA,GSM/WCDMA*/ NETWORK_MODE_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA = 22; /* TD-SCDMA/LTE/GSM/WCDMA, CDMA, and EvDo */ 注意事项对于新刷的Lineage，请完全备份了你的应用等等之后，再进项更改锁定，锁定完毕后，进入TWRP，进行清除，恢复出厂设置，开机后，就可以看见网络被更改了。对于更新的Lineage，一次更改后，以后的更新就不必再改了，哪怕built.prop里面没有锁定网络的行，也是能够使用的。 引用资料http://blog.csdn.net/tony_anmoo/article/details/18707015 https://github.com/aqutor/Cyanogenmod-cancro/wiki/%E9%BB%98%E8%AE%A4%E7%BD%91%E7%BB%9C%E5%88%B6%E5%BC%8F%E4%BF%AE%E6%94%B9%EF%BC%88%E7%94%B5%E4%BF%A1-3G-%E7%94%A8%E6%88%B7%E5%8F%AF%E7%94%A8%EF%BC%89-Modify-Default-Network-Option","link":"/posts/32481/"},{"title":"迁移 Hexo 博客于 GitHub 并使用 GitHub Actions 进行编译及部署","text":"前言因为最近 4 个月都没有电脑用，而想写点博客也只能在公众号写，无法用自己的电脑部署，不够爽，加上之前有看到可以利用 GitHub Actions 功能进行云编译和部署，遂尝试一下。毕竟未来数月也没有电脑用，总要写点东西打发时间。 本文适用于在本地电脑已有 Hexo 文件夹的用户，目标是将源文件迁移到 GitHub 中，并使用 GitHub Actions 功能在提交新的文章后自动进行编译与部署，减少操作步骤，提升使用体验。在某种程度上，也避免了对于电脑的依赖。(当然你也可以本地安装了 Hexo 和主题后上传) 步骤定义首先做出本文定义，以为了表达明确： 假设读者为位于大陆境内，熟练掌握通灵术的用户，且已有 GitHub 账户。 在 GitHub 上，储存原始 Hexo 文件的 repository 为私有仓库 Blog, 例如 github.com/user/blog 在 GitHub 上，部署公开文件的 repository 为公开仓库 Public, 例如 github.com/user/user.github.io 对于一般（白嫖）用户，GitHub 私人仓库使用限制为 2000 分钟/月，每次执行编译时间不一，视文章数量及插件使用数量而定，约 2 分钟， 完全能够满足个人部署需求及试错学习。 坚决抵制用 main 替代 master, 反正出 bug 了不可能手动去修的。 使用 GitHub Desktop 上传由于 GitHub 网页上传有限制，体验不佳，建议下载 GitHub Desktop 来上传。 使用 Netch 全局通灵为啥不使用路由或是一般的软件呢，因为他们功力不够强，无法通灵命令行。 Netch 发布页面在→这里 具体设置自行领会 建立 Blog打开 GitHub Desktop 打开本地 Hexo 文件夹，除了public .depoloy_git node_modules 外，其他都复制到 Blog 文件夹 创建 commit Push 到 GitHub 创建 SSH 密匙 (此部分引用 sanonz 的文章)1ssh-keygen -f github-deploy-key 当前目录下会有 github-deploy-key 和 github-deploy-key.pub 两个文件。 添加 SSH 密匙到 repository (此部分引用 sanonz 的文章)复制 github-deploy-key 文件内容，在 Blog 仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加。 在 Name 输入框填写 HEXO_DEPLOY_PRI。 在 Value 输入框填写 github-deploy-key 文件内容。 复制 github-deploy-key.pub 文件内容，在 your.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加。 在 Title 输入框填写 HEXO_DEPLOY_PUB。 在 Key 输入框填写 github-deploy-key.pub 文件内容。 勾选 Allow write access 选项。 创建 GitHub Actions (此部分引用 sanonz 的文章)Workflow 模版在 Blog 仓库根目录下创建 .github/workflows/deploy.yml 文件。 在 deploy.yml 文件中粘贴以下内容。 我修改之后的版本在后面，下面这个作为参考吧 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667name: CIon: push: branches: - masterenv: GIT_USER: Sanonz GIT_EMAIL: sanonz@126.com THEME_REPO: sanonz/hexo-theme-concise THEME_BRANCH: master DEPLOY_REPO: sanonz/sanonz.github.io DEPLOY_BRANCH: masterjobs: build: name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }} runs-on: ubuntu-latest strategy: matrix: os: [ubuntu-latest] node_version: [12.x] steps: - name: Checkout uses: actions/checkout@v2 - name: Checkout theme repo uses: actions/checkout@v2 with: repository: ${{ env.THEME_REPO }} ref: ${{ env.THEME_BRANCH }} path: themes/concise - name: Checkout deploy repo uses: actions/checkout@v2 with: repository: ${{ env.DEPLOY_REPO }} ref: ${{ env.DEPLOY_BRANCH }} path: .deploy_git - name: Use Node.js ${{ matrix.node_version }} uses: actions/setup-node@v1 with: node-version: ${{ matrix.node_version }} - name: Configuration environment env: HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}} run: | sudo timedatectl set-timezone &quot;Asia/Shanghai&quot; mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL cp _config.theme.yml themes/concise/_config.yml - name: Install dependencies run: | npm install - name: Deploy hexo run: | npm run deploy 执行任务在此仓库 Actions 页面查看当前 task。 当任务完成后查看你的博客 https://your.github.io，如果不出意外的话已经可以看到新添加的文章了。 效果pros. ✔️ 利用 GitHub Desktop, 可以实现在电脑写作好了，一键 push 到部署。 ✔️ Git 的版本控制可实现文字基本不会丢，当然还是建议和 Dropbox 一同使用以增加安全感。 ✔️ 安卓大概可以用纯纯写作来写一下了？（也太麻烦了吧，目前还没找到一个无缝对接 GitHub 的 安卓 Markdown 编辑器） ✔️ 自动化操作，幸福感 max. ✔️ 白嫖，幸福感 max plus. cons. 🔴 abbrlink 插件无法针对原文件进行修改，即 header 里不会出现 abbrlink: XXXXX, 对于强迫症不能忍。实际多次 push 后新文章 link 不会变，勉强能接受。 已于下文解决。 🔴 如果开启了 “更新于” 功能，所有文章更新时间全都是最新一次 push 的时间了。 于下文有解决方式。 🔴 如果不特意保存 .git 文件夹，则所有 git 历史均被清空，以上模板就会导致如此。于下文有解决方式。 针对遇到的问题及作出的尝试遇到的问题1 Git 历史丢失描述：user.github.io 中 commits 历史记录消失，就真的找不回来了。(这就是我陈年文章都变成最近更新的原因了。) 原因：GitHub Actions 相当于在一台新电脑里执行 push 操作，自然是不存在以前的 .git 文件的。 解决方式：已经丢失的找不回来了。还没丢失的，先备份一个吧。Workflow 里添加几个步骤，将 user.github.io 的 git 记录搬运回来，再执行 push，就可以把新的 commits 加到旧的里面了。 2 旧文章更新日期被替换为更新日期描述：访问文章，可见 “更新于” 的时间为 push 的时间 原因：Hexo 将 mtime 即文件修改时间，作为了文件的 updated 时间。如果在个人电脑上，这个逻辑说得过去，但于 CI 这样的云端，每个文件都是新鲜下载的，时间当然会变。而 git 本身是不保存文件修改时间的。原因：在这里。看到了几篇可以参考的文章，都说可以用命令行把文件修改时间改为上次 git 时间，达到近似修改时间的作用，对于博客来说，时间精确度要求确实没那么高。而在多次测试后，才发现原来是 checkout 步骤里，默认的 clone 深度只有 1, 意味着位于子文件夹内的文章 md 文件的记录并没有被下载到。所以多看看 wiki 是多么重要。尬。 不完全解决方式：5.0.0 Hexo 的配置文件 _config.yml 里面的 updated_option: 'mtime' 将 mtime 更改为 date, 这样就更新时间就和发布时间一致了。如果特别需要更新时间，则在文章的 header 部分，添加 updated: 2020-10-07 12:54:21 这样就可以了。 解决方式: 在 Workflow 里，添加 checkout 的深度参数 fetch-depth: 0, 之后再添加一个恢复修改时间的命令。 3 新文章无法添加 abbrlink 到原始文件描述：位于私有仓库的新文章，执行 Actions 之后并没有在文章的 header 处增加 abbrlink, 而在公开仓库的新文章多次部署的 abbrlink 均唯一（更改标题后会改变，大概是按标题来运算的），基本不影响访客体验。 原因：当然是没有 push 到 私人仓库呀。但是如果这样做，又会触发一个 Actions, 陷入无限循环。我的设想是：在 Workflow 开头设定筛选，只有用户的 push 才能触发，GitHub Actions BOT 则不能，最后加上由 GitHub Actions BOT 执行 push, 把修改后的文件 push 回私人仓库。 解决方式：看了 GitHub 的指南，没有这个选择。但是忽然想到之前玩云编译 OpenWrt 时候，可以设定对点星星的用户 id 进行判定，如果是本人，则执行 Workflow, 如果是其他人，则不执行。所以得出：在 push 到公开仓库后，更改 git 用户为机器人，创建 commit 和进行 push, 这样就不会触发了。 最终的 Workflow 文件复制粘贴后记得删除#后面的内容呀，出错了我可不负责！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687name: HEXO CIon: push: branches: - master #目前 GitHub 已使用 main 来替代 master 分支，自行注意 watch: types: started #此处设置点星星可以执行文件，方便进行向搜索引擎推送或测试env: TZ: Asia/Shanghai #时区：上海 GIT_USER: user #你的 GitHub 用户名，自行替换 GIT_EMAIL: user@hotmail.com #你的 GitHub 用户邮箱，自行替换 HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}} #密匙 GITHUB_REPO: github.com/user/user.github.io #你的 GitHub 公共仓库地址，自行替换jobs: build: if: github.event.repository.owner.id == github.event.sender.id runs-on: ubuntu-latest strategy: matrix: os: [ubuntu-latest] #选择运行系统 node_version: [12.x] #选择 Node 版本 steps: - name: Set Timezone to UTC+8 #设置时区 env: DEBIAN_FRONTEND: noninteractive run: | sudo timedatectl set-timezone &quot;$TZ&quot; - name: Checkout codes #克隆私有仓库代码 uses: actions/checkout@v2 with: fetch-depth: 0 - name: Last Modify Time Revert #恢复上次修改时间 run: | git ls-files -z | while read -d '' path; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$path&quot;)&quot; &quot;$path&quot;; done - name: Use Node.js ${{ matrix.node_version }} #运行 Node uses: actions/setup-node@v1 with: node-version: ${{ matrix.node_version }} - name: Cache node modules #缓存 Node 模块 uses: actions/cache@v1 with: path: ~/.npm key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} - name: Configuration environment #设置 SSH 及 Git run: | mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL - name: Install dependencies #安装 Hexo 及依赖包 run: | npm i -g hexo-cli npm i - name: Genarate hexo run: | git clone &quot;https://$GITHUB_REPO&quot; public #克隆公开仓库 git clone &quot;https://$GITHUB_REPO&quot; .deploy_git #克隆公开仓库 hexo clean hexo g - name: Deploy hexo blog #部署 Hexo run: | hexo d - name: Reset Git config #重置 git 用户为 BOT run: | git config --local user.email &quot;action@github.com&quot; git config --local user.name &quot;GitHub Action&quot; git add . git diff --quiet &amp;&amp; git diff --staged --quiet || git commit -am '回传更新' - name: Re-upload to Private Repository #回传回私有仓库 uses: ad-m/github-push-action@v0.5.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} 此外，你还可以自行修改，增加运行成功的信息推送到微信或者 Telegram. 顺带，如果要添加第三方的插件，可直接在 package.json 里定义就行了，简单。运行成功后，相关的包的版本会自动回传到 package-lock.json 以用于下次 Node 模块缓存，无需在意了。 1234567推荐使用的插件：hexo-abbrlinkhexo-deployer-githexo-generator-sitemaphexo-lazyload-imagehexo-submit-urls-to-search-engine添加之后，参考他们的官方指南，在 _config.yml 或者主题的配置文件中做好修改。 参考文章https://github.com/marketplace/actions/hexo-action https://hdj.me/github-actions-hexo-cicd/ https://juejin.im/post/6854573218779381773 https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/ https://xirikm.net/2020/313-1 https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine.html https://hexo.io/zh-cn/docs/configuration.html https://stackoverflow.com/a/40255467 https://github.com/actions/checkout","link":"/posts/61081/"},{"title":"使用 Github Action 定制 LEDE Openwrt K2P 路由固件","text":"前言脱离了校园网环境了，家里白嫖了移动宽带，所以需要一个路由器来实现一些想要的功能。之前的 K2P 刚好拿来折腾一下下。然而，Hiboy 的固件功能过于丰富，ChongShengB 的固件中的 SmartDNS 和 AdGuard Home 在长时间（几个小时）的运行后，都会失效，出现没有 DNS 解析的问题，恩山论坛上倒是有个固件不错，但没有去广告功能，所以生出自己定制固件的想法，今天基本完成了，所以写个文章记录一下。 更新1.0：修改并简化操作 更新1.1：修复重启后 WiFi 未开启的 Bug 更新1.2：修改闪存部分勘误 路由基本信息K2P 硬改，32M 闪存，512M 内存，USB 3.0 过程之前定制 ChongshengB 的固件就不写了，这里写定制 LEDE 的 Openwrt. 本着不造轮子的想法，检索了一下，发现有现成的脚本，使用了 Github Action 功能进行云编译，不占用本地资源。 总的来说，需要 Fork 一下 P3terx 仓库，自行修改 .config diy.sh 和 .yml. P3terx仓库P3大佬又更新了仓库，我这文章不想改了，基本原理是一样的。 需添加 .config 文件以决定要不要软件，说明我就不写了，人家写得很清楚。 建议第一次云编译，保存种子配置之后好修改。 另外，对于没自定义却自己带的软件，可增添如下配置以取消： 123CONFIG_PACKAGE_luci-app-vlmcsd=nCONFIG_PACKAGE_luci-i18n-vlmcsd-zh-cn=nCONFIG_PACKAGE_vlmcsd=n diy.sh 脚本还可以修改默认路由管理地址以避免和光猫冲突。 以下更改为了192.168.2.1，可自行更改。 1sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate 坑：我是 32M 闪存，然而 LEDE 那里编译的默认是 16M 闪存的，所以需要自行修改编译固件大小： 编辑 diy.sh 添加： 12sed -i 's/0xf60000/0x1f60000/g' target/linux/ramips/dts/mt7621_phicomm_k2p.dtssed -i 's/15744k/32448k/g' target/linux/ramips/image/mt7621.mk 第一行计算方式为： 32M 闪存 = 32x1024x1024 = 33554432k (16 进制为 0x2000000), 去除掉之前留给 u-boot 等的空间 (0x0 - 0xa0000), 剩余则为 0x1f60000 第二行为修改固件最大大小，避免生成固件失败，同样改为 32M，留一点空余的话：32488＜32768 仓库地址 AdGuard Home luci app由于 LEDE 没有 AdGuard Home，倒是有 Adbyby Plus，但实测不好用。所以我是要自定义去除 Adbyby Plus，添加 AdGuard Home. 在 P3terx 的 .config 里添加 CONFIG_PACKAGE_luci-app-adguardhome=y 然后在 diy.sh 里添加： 123git clone https://github.com/rufengsuixing/luci-app-adguardhome package/lean/luci-app-adguardhome/./scripts/feeds update -a./scripts/feeds install -a PS: 这里和 P3 的说明不一样。 反正 git clone 后面不加目录就不会编译进去，那就加一个目录咯。 仓库地址 编译完成后的设置SSH 连接并执行 df -h 可以看见是 32M 的固件大小了，不需要担心 AdGuard Home 的过滤器太多放不下。 AdGuard Home 设置更新 AdGuard Home 内核。 使用 “作为 dnsmasq 的上游服务器”。 转到 手动设置 里，修改为： 12port: 5335blocked_response_ttl: 60 再启用。 进入 AdGuard Home 网页管理界面，更改 DNS 和过滤器： DNS (个人用): 123456https://dns.alidns.com/dns-querytls://dns.googlehttps://i.233py.com/dns-queryhttps://dns.cloudflare.com/dns-querytls://1.1.1.1240c::6666 过滤器 (个人用)： 12345678910https://gitee.com/halflife/list/raw/master/ad.txthttps://cdn.jsdelivr.net/gh/vokins/yhosts/hostshttps://raw.githubusercontent.com/vokins/yhosts/master/data/tvbox.txthttps://gitee.com/privacy-protection-tools/anti-ad/raw/master/easylist.txthttps://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txthttps://gitee.com/banbendalao/adguard/raw/master/ADgk.txthttps://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txthttps://adaway.org/hosts.txthttps://hosts.nfz.moe/full/hostshttps://raw.githubusercontent.com/StevenBlack/hosts/master/hosts 强烈建议：在测试 AdGuard Home 运行成功并且稳定之后，把 日志 关闭，否则闪存空间非常容易被塞满。 设定完成后，才可以启动 SSR. IPV6的设置只需要把光猫的拨号更改为桥接，使用 K2P 拨号，就会自动分配 IPV6 地址了。 然后在 网络----DHCP/DNS----高级设置 里，取消打钩 禁止解析 IPv6 DNS 记录。 IPV6 的 DNS 可以添加在 AdGuard Home 里面。 最后，去 https://test-ipv6.com 测试一下就好了。 （因为目前 IPV6 的路由满世界瞎跑，所以我禁止掉了 IPV6 解析，只留下了分配 IPV6 地址，这样有时候需要 ping 一下，也不用麻烦。） 自动重启后，WiFi 未开启这个问题在我 Build 固件后复现率非常高。 经过 Google 后，发现如果在启动项加入重启 WiFi 的几条命令后，问题得以解决。 步骤手动添加如果你已经编译好了，不想再折腾了，或者是用的其他人的固件，那么选择手动添加吧。 系统--启动项--本地启动脚本 添加如下命令，一定是要放在 exit 0 之前： 1234ifconfig rax0 upifconfig ra0 upifconfig apclix0 upifconfig apcli0 up 在编译时的 diy.sh 添加在 diy.sh 中，添加： 12# Fix WiFi disabled after rebootsed -i &quot;2a\\ifconfig rax0 up\\nifconfig ra0 up\\nifconfig apclix0 up\\nifconfig apcli0 up&quot; package/base-files/files/etc/rc.local 这样编译出来的固件就会带以上命令，无需手动添加了。 实现功能 定时重启 AdGuard Home 广告过滤 这里和谐了 UPnP Turbo ACC IPV6 管理页面为192.168.2.1 Q &amp; AQ: 为什么没有带 USB 功能？ A: 因为个人用不到 NAS、打印机、无线网卡等功能，精简之后更稳定且留出空间给过滤器。 Q: AdGuard Home 功能怎么样？ A: 添加以上 10 个列表之后，我访问的网站能过滤很多广告，在 https://checkadblock.ru 上能得到 71/100 的分数，对于防护网站默认开启的追踪功能也有一定作用。但对于 和谐视频网站 的网页和视频开头广告没有效果。对于 DNS 分流，基本没用，建议折腾 SmartDNS 去。 AdGuard Home 更新了一个 “最快的 IP 地址” 选项，可以查询并返回响应最快的地址，原理类似于 SmartDNS。SmartDNS 已经不更新了，使用 AdGuard Home 在一定程度上可以替代，且在开发组开发和大家的反馈下，功能应该会更好。 Q: 和谐功能 效果怎么样？ A: 由于 K2P 的 CPU 性能不足，无法发挥我的 和谐 线路的实力，开启多线程后，下载可以达到 3.3M/s 的速度，基本满足 1080P 视频和日常聊天的需要。 参考文档https://github.com/coolsnowwolf/lede https://p3terx.com/archives/build-openwrt-with-github-actions.html https://blog.csdn.net/xbgzytb/article/details/104775879","link":"/posts/16454/"},{"title":"RosettaStone","text":"简介学习新语言的方法与您学习母语的方法相同。有趣直观的浸入式的课程，教您用新的语言说话和思考。自然地发展基本的语言技能，无需依赖翻译和死记硬背！从一开始，您将用新的语言说话。您甚至还将收到我们独有的语音识别技术针对您的发音提供的反馈。 通过由语言学习方面的专家设计的有趣且可自定进度的课程，您可以学习包括西班牙语、汉语、日语、英语、德语、法语和意大利语在内的 24 种语言中的一种。全世界数百万的人使用我们的语言应用程序。 背景语言是一种工具，能连接你和别人的思维。就我个人学习英语的经历而言，学得越多，了解得越多，才知道自己不知道的更多。从百度搜索转移到谷歌搜索，再后来使用英文来搜索，这才知晓英语的简洁、直接和重要性。 而对于别的语言，我也很感兴趣。几年前也用过Rosetta Stone的电脑版本，惭愧，盗版，但是却是一种新的学习语言的方法。因电脑原因，我并没有使用几天。现在，Rosseta Stone有了移动端，而且用户体验做得很棒，再者，手机配麦克风也是常态了，为什么不可以好好利用这个软件呢？再次，用盗版很惭愧，但是正版的内购真的很贵。以下来自于AppStore,安卓好像也这个价格吧。 热门 App 内购买项目 英语(美国)(5个级别)¥1,298.00 英语(美国)(5个级别)¥1,298.00 英语(英国)(5个级别)¥1,298.00 日语(3个级别)¥848.00 法语(5个级别)¥1,298.00 德语(5个级别)¥1,298.00 日语(3个级别)¥848.00 法语(5个级别)¥1,298.00 西班牙语(西班牙)(5个级别)¥1,298.00 英语(英国)(5个级别)¥1,298.00 链接cracked_w4ih backup_s6jk 使用方法要求1.安卓系统。 2.ROOT 权限 3.钛备份 4.辛运破解器（可选） 5.文件管理器，比如RE浏览器 步骤下载链接中的东西，记着位置就好。然后下载正常的rs3.0.2版本，安装。 使用钛备份备份一次，卸载软件，把下载的三个备份转移到钛备份目录，把名字改成刚才备份的，覆盖。 安装幸运破解器破解过的apk，完毕后使用钛备份恢复备份。 进入软件，退出登陆，自己登陆自己的账号就是了。 2017/4/20 21:25:22 补充 3.10版本也有方法可以用哟。 按以上步骤 最后使用钛备份恢复数据 数据 数据 就行了。 对于3.11，暂未尝试。 2017/4/21 21:34:42 补充 我今日测试了3.11版本，昨日的方法有效。我暂且推测在小版本更新中，这种方法应该会有用。 2017/9/1 11:48:32 补充 之后的版本貌似失效了","link":"/posts/28651/"},{"title":"ipv6路由解决方案","text":"继上一篇解决校园网使用ipv6冲浪的文章后，路由成为了一个新的问题。普通路由一般是不支持IPV6或者不支持IPV6穿透的，所以我基于我的网络环境说说我的方法吧。 首先，我的端口是校园网的（废话），支持V4/V6，V4需要进行网页登陆认证（dr.com），V6则不需要。 检测自己的V6是否可用v6有很多的站点，在不拨号的情况下访问 bt.byr.cn bt.neu6.edu.cn 如果能成功进入，则代表V6可以正常运行。 路由的选择现在路由也进入智能化时代了，能有各种各样的功能。当然，前提是不要买坑爹的路由。 diy路由此种路由是由正常的（阉割得不厉害的）路由拆下原来的ROM/RAM，再焊一个更大的上去 如果有动手能力，可以自己玩 通过某些购物网站可以买到此种路由，价格在几十到两百之间 品牌路由网件、华硕之类的高端货够强悍，玩的人也多，当然价格也贵，便宜的一般都是300+，固件丰富，可玩性强。 这里需要说明一下，不是所有的品牌、所有型号都是支持刷机的，购买前请google一下，否则买了没有用很是尴尬。 “免费”路由注意：&gt;免费是有引号的 互联网金融（就是放高利贷的）很火爆，催生了斐讯之类的“免费”路由，XXX块买个路由，等X月后从金融平台提现，相当于免费。 目前，斐讯又推出了K3了，感觉很不靠谱。┑(￣Д ￣)┍ 由于这种路由相当火爆，求固件的人很多，所以基本有一条龙刷固件的方式。 ！经过网友爆料，斐讯自带的固件有后门，会窃取用户信息，如果不是用v6,单纯用v4的同学也请注意一下。浪费点时间刷固件，还是个人信息被偷，你高兴就好。 更新1.0：之前有斐讯官改固件强制升级的，建议避免使用官改。另，斐讯这样的模式已经GG了，K2P能卖200+，我也很疑惑，大概是固件多吧。 固件我自己用过最新的openwrt、padavan恩山论坛改版的、openwrt明月永在，都是支持IPV6的。目前使用的是第二个。 具体折腾需要自己操作哈，我给出我的参考。 网线从墙上接到lan口，找另外一根网线，一端接在wan，一端接在lan（因为连上路由后，能正常使用SS/softether，但是不能访问六维等网站，这个方法是别人的，很好用。但是这样就只能用软件连接vps了，而不能使用路由内置的脚本，so sad）. 至于设定，在ipv6选项里面开启dhcp6native，v6的硬件加速可以开。DNS自动获取就好。wlan的设定同普通路由。其他一些脚本功能，可以自己琢磨，用好了有大用处。 总结如果你只用vps，不用电信之类的宽带，一个路由是必要的（美服、日服、港服什么的更方便了，还不强行防火墙，何必用电信和几十一个月的加速器呢），对功能不追求很多的话，基础款————diy的或者“免费”的就好。","link":"/posts/19219/"},{"title":"在 Sublime 中批处理技巧的记录","text":"前言日常记录在 Sublime 中遇到的问题，以及批处理的技巧。 目标批量选择含有特定字符的行，并删除比如在筛选 IP 时，以 .0 结尾的 IP 应该删除，但在某些软件的自动生成中缺少这个功能。 以如下 IP 段举例： 12127.0.0.0/241.2.5.0/24 转换出来的 IP 清单为： 12345678127.0.0.0127.0.0.1...127.0.0.2551.2.5.01.2.5.1...1.2.5.255 所以可以使用 Sublime 进行处理，删除以 .0 结尾的行。 操作以鼠标选中 .0，使用 Alt + F3 的快捷方式，选择所有的 .0，再使用 Ctrl + L，选中所有含 .0 的行，然后按 Delete. （Sublime 自动选择了换行符，所以删除时候是连同换行一起删除，省去再删除空白行的麻烦。） 在行首、行尾或特定区域加入文字如果需要批量 curl 的话，比如： 12www.a.comwww.b.com 那么方法一是把以上 IP 作为一个文本保存，使用 -K 参数，但是需要手动添加，指定 url 参数： 12url=&quot;www.a.com&quot;url=&quot;www.b.com&quot; 但是若是以上 IP 并非标准端口，或者需要 curl 到特定目录，比如 /subfolder/test 呢： 12www.a.com:8888/subfolder/testwww.b.com:8888/subfolder/test 可以看到都需要去更改原始的列表。 操作单行编辑在 Windows 下，可以使用 HOME 移动光标到行首，END 到行尾。 多行编辑Shift 加鼠标右键，划出要添加的行： ​ 可以选择需要编辑的部分，比如行首，行的中间几个字符位。如果需要行尾编辑，则再使用 → 键 所有行编辑Ctrl 加 A 选中所有文字, Ctrl 加 Shift 加 L 选中所有行： ​ →, 在所有行尾编辑。 ​ ←, 在所有行首编辑。","link":"/posts/56234/"},{"title":"英文版 UpToDate 订阅账号切换为中文浏览的方法","text":"前言这个需求来自于偶然白嫖到的半年 UpToDate 的订阅，只能访问英文词条，无法查看中文版的内容，带来极大痛苦（是我太菜了，虽然英文看得懂一点，但满屏都是的话，就心情不佳）。而在 UpToDate 官方的 support 页面，只提示界面语言可设定为简体中文，但词条内容将始终是英文。而这和我之前体验到的并不一致，可能是分语言订阅的？我之前在丁香园体验了一个月的简体中文版，可后期要付费了。所在医院购买了 UpToDate，能在内网进行访问，可惜需要一个连接准入客户端登入才能连上，否则就可以白嫖医院的订阅了。通过搜索引擎，得知了两种切换简体中文进行浏览词条内容的方法，而在我的测试成功之后，写下这篇文章以进行总结、记录和分享。 方法一 分享词条链接，通过隐身模式进行访问，即可绕过设置或 cookie 等，访问简体中文词条内容。针对只看一次的内容。 步骤分享打开需要查看的内容，选择分享 用浏览器隐身模式打开接收到链接后，复制。打开浏览器，进入隐身模式。 在链接中添加代码进行转化在浏览器中粘贴链接，插入代码 zh-Hans/ 效果✔️访问词条的简体中文版本内容 ❌分享链接会过期，(不知道是按时间还是按打开次数计算的) ❌相当于匿名访问，没有图片和表格 方法二 分享链接打开后，使用打印，有能选择 Chinese 的选项，于是能简体中文浏览。针对后续想细细研究的内容。 步骤分享打开需要查看的内容，选择分享 浏览器打开接收到链接后，复制。打开浏览器，粘贴并进入。只要没登陆都可以，不必一定是隐身模式。 打印右上角有 Print, 然后再选 Chinese 就好了。在做这一步时候，IP 一定要位于中文区。再点一下打印就好了。针对 iOS 系统的话，用手指放大第一页，就自动生成 PDF 文件，此时可以保存到本地或用第三方 APP 打开了。安卓则有直接保存 PDF 文件的选项。 效果✔️访问词条的简体中文版本内容 ✔️点击打印可保存为 PDF，方便后期查阅 ❌分享链接会过期，(不知道是按时间还是按打开次数计算的) ❌相当于匿名访问，没有图片和表格 ❌有时需要仔细研究某种疾病或症状时，往往需要很多词条，这样保存就很累 附言UpToDate 是个好东西，能有最前沿的知识库，并且是有循证支持的。好工具得好好利用才行。 顺带，我这里出售 3 个月订阅的账号，20 块，也算搞顿外卖吃吧。 之前测试过使用日本 IP 后，在搜索结果页面出现了 “View in Chinese” 的小选项框，可直接访问简体中文内容，但后期测试并不能复现，大概需要什么时候搞个日本机构的账户来测试才行。 参考文章https://goldengrape.github.io/posts/bulabula/uptodate-zh-Hans/ https://www.dxy.cn/bbs/newweb/pc/post/39903036","link":"/posts/39040/"}],"tags":[{"name":"Cloudflare","slug":"Cloudflare","link":"/tags/Cloudflare/"},{"name":"域名","slug":"域名","link":"/tags/%E5%9F%9F%E5%90%8D/"},{"name":"301","slug":"301","link":"/tags/301/"},{"name":"NameCheap","slug":"NameCheap","link":"/tags/NameCheap/"},{"name":"DNSPod","slug":"DNSPod","link":"/tags/DNSPod/"},{"name":"app","slug":"app","link":"/tags/app/"},{"name":"安卓","slug":"安卓","link":"/tags/%E5%AE%89%E5%8D%93/"},{"name":"福利","slug":"福利","link":"/tags/%E7%A6%8F%E5%88%A9/"},{"name":"医学","slug":"医学","link":"/tags/%E5%8C%BB%E5%AD%A6/"},{"name":"Kanopy","slug":"Kanopy","link":"/tags/Kanopy/"},{"name":"Hoopla","slug":"Hoopla","link":"/tags/Hoopla/"},{"name":"OverDrive","slug":"OverDrive","link":"/tags/OverDrive/"},{"name":"Libby","slug":"Libby","link":"/tags/Libby/"},{"name":"图书馆","slug":"图书馆","link":"/tags/%E5%9B%BE%E4%B9%A6%E9%A6%86/"},{"name":"电子资源","slug":"电子资源","link":"/tags/%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90/"},{"name":"影视","slug":"影视","link":"/tags/%E5%BD%B1%E8%A7%86/"},{"name":"图书","slug":"图书","link":"/tags/%E5%9B%BE%E4%B9%A6/"},{"name":"纪录片","slug":"纪录片","link":"/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"},{"name":"lineage","slug":"lineage","link":"/tags/lineage/"},{"name":"lte","slug":"lte","link":"/tags/lte/"},{"name":"4g","slug":"4g","link":"/tags/4g/"},{"name":"索尼","slug":"索尼","link":"/tags/%E7%B4%A2%E5%B0%BC/"},{"name":"Z3+","slug":"Z3","link":"/tags/Z3/"},{"name":"Z4","slug":"Z4","link":"/tags/Z4/"},{"name":"E6533","slug":"E6533","link":"/tags/E6533/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"GitHub Actions","slug":"GitHub-Actions","link":"/tags/GitHub-Actions/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Openwrt","slug":"Openwrt","link":"/tags/Openwrt/"},{"name":"LEDE","slug":"LEDE","link":"/tags/LEDE/"},{"name":"Github Action","slug":"Github-Action","link":"/tags/Github-Action/"},{"name":"路由器","slug":"路由器","link":"/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"K2P","slug":"K2P","link":"/tags/K2P/"},{"name":"路由","slug":"路由","link":"/tags/%E8%B7%AF%E7%94%B1/"},{"name":"ipv6","slug":"ipv6","link":"/tags/ipv6/"},{"name":"技巧","slug":"技巧","link":"/tags/%E6%8A%80%E5%B7%A7/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"Sublime","slug":"Sublime","link":"/tags/Sublime/"},{"name":"UpToDate","slug":"UpToDate","link":"/tags/UpToDate/"}],"categories":[{"name":"折腾","slug":"折腾","link":"/categories/%E6%8A%98%E8%85%BE/"},{"name":"应用","slug":"应用","link":"/categories/%E5%BA%94%E7%94%A8/"},{"name":"记录","slug":"记录","link":"/categories/%E8%AE%B0%E5%BD%95/"}]}