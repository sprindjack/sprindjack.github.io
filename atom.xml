<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Froggy Moon</title>
  
  <subtitle>Bay</subtitle>
  <link href="https://soacg.pp.ua/atom.xml" rel="self"/>
  
  <link href="https://soacg.pp.ua/"/>
  <updated>2020-10-06T17:12:36.000Z</updated>
  <id>https://soacg.pp.ua/</id>
  
  <author>
    <name>左吉士</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移 Hexo 博客于 GitHub 并使用 GitHub Actions 进行编译及部署</title>
    <link href="https://soacg.pp.ua/posts/61081/"/>
    <id>https://soacg.pp.ua/posts/61081/</id>
    <published>2020-10-05T03:37:24.000Z</published>
    <updated>2020-10-06T17:12:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为最近 4 个月都没有电脑用，而想写点博客也只能在公众号写，无法用自己的电脑部署，不够爽，加上之前有看到可以利用 GitHub Actions 功能进行云编译和部署，遂尝试一下。毕竟未来数月也没有电脑用，总要写点东西打发时间。</p><p>本文适用于在本地电脑已有 Hexo 文件夹的用户，目标是将源文件迁移到 GitHub 中，并使用 GitHub Actions 功能在提交新的文章后自动进行编译与部署，减少操作步骤，提升使用体验。在某种程度上，也避免了对于电脑的依赖。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>首先做出本文定义，以为了表达明确：</p><ul><li><p>假设读者为位于大陆境内，熟练掌握通灵术的用户，且已有 GitHub 账户。</p></li><li><p>在 GitHub 上，储存原始 Hexo 文件的 repository 为私有仓库 Blog, 例如 github.com/user/blog</p></li><li><p>在 GitHub 上，部署公开文件的 repository 为公开仓库 Public, 例如 github.com/user/user.github.io</p></li><li><p>对于一般（白嫖）用户，GitHub 私人仓库使用限制为 2000 分钟/月，每次执行编译时间不一，视文章数量及插件使用数量而定，约 2 分钟， 完全能够满足个人部署需求及试错学习。</p></li><li><p>坚决抵制用 main 替代 master, 反正出 bug 了不可能手动去修的。</p></li></ul><h2 id="使用-GitHub-Desktop-上传"><a href="#使用-GitHub-Desktop-上传" class="headerlink" title="使用 GitHub Desktop 上传"></a>使用 GitHub Desktop 上传</h2><p>由于 GitHub 网页上传有限制，体验不佳，建议下载 GitHub Desktop 来上传。</p><h3 id="使用-Netch-全局通灵"><a href="#使用-Netch-全局通灵" class="headerlink" title="使用 Netch 全局通灵"></a>使用 Netch 全局通灵</h3><p>为啥不使用路由或是一般的软件呢，因为他们功力不够强，无法通灵命令行。</p><p>Netch 发布页面在→<a href="https://github.com/NetchX/Netch/releases">这里</a></p><p>具体设置自行领会</p><h3 id="建立-Blog"><a href="#建立-Blog" class="headerlink" title="建立 Blog"></a>建立 Blog</h3><p>打开 GitHub Desktop</p><p><img src="https://i.loli.net/2020/10/05/ObcGqpNv6CPawQW.png" alt="1.png"></p><p><img src="https://i.loli.net/2020/10/05/4o5yRLU93xgDXih.png" alt="2.png"></p><p>打开本地 Hexo 文件夹，除了<code>public</code> <code>.depoloy_git</code> <code>node_modules</code> 外，其他都复制到 <code>Blog</code> 文件夹</p><h3 id="创建-commit"><a href="#创建-commit" class="headerlink" title="创建 commit"></a>创建 commit</h3><p><img src="https://i.loli.net/2020/10/05/ZJpuycteBEQM7Dx.png" alt="3.png"></p><h3 id="Push-到-GitHub"><a href="#Push-到-GitHub" class="headerlink" title="Push 到 GitHub"></a>Push 到 GitHub</h3><p><img src="https://i.loli.net/2020/10/05/kHwAqiE2G8csrXR.jpg" alt="4.jpg"></p><h3 id="创建-SSH-密匙-此部分引用-sanonz-的文章"><a href="#创建-SSH-密匙-此部分引用-sanonz-的文章" class="headerlink" title="创建 SSH 密匙 (此部分引用 sanonz 的文章)"></a>创建 SSH 密匙 (此部分引用 <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">sanonz</a> 的文章)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>当前目录下会有 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p><h3 id="添加-SSH-密匙到-repository-此部分引用-sanonz-的文章"><a href="#添加-SSH-密匙到-repository-此部分引用-sanonz-的文章" class="headerlink" title="添加 SSH 密匙到 repository (此部分引用 sanonz 的文章)"></a>添加 SSH 密匙到 repository (此部分引用 <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">sanonz</a> 的文章)</h3><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>Blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ol><li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ol><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/add-secret@2x.png" alt="img"></p><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ol><li>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li><li>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li><li>勾选 <code>Allow write access</code> 选项。</li></ol><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/add-key@2x.png" alt="img"></p><h3 id="创建-GitHub-Actions-此部分引用-sanonz-的文章"><a href="#创建-GitHub-Actions-此部分引用-sanonz-的文章" class="headerlink" title="创建 GitHub Actions (此部分引用 sanonz 的文章)"></a>创建 GitHub Actions (此部分引用 <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">sanonz</a> 的文章)</h3><h4 id="Workflow-模版"><a href="#Workflow-模版" class="headerlink" title="Workflow 模版"></a>Workflow 模版</h4><p>在 <code>Blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件。</p><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><p><strong>我修改之后的版本在后面，下面这个作为参考吧</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  GIT_USER: Sanonz</span><br><span class="line">  GIT_EMAIL: sanonz@126.com</span><br><span class="line">  THEME_REPO: sanonz&#x2F;hexo-theme-concise</span><br><span class="line">  THEME_BRANCH: master</span><br><span class="line">  DEPLOY_REPO: sanonz&#x2F;sanonz.github.io</span><br><span class="line">  DEPLOY_BRANCH: master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest]</span><br><span class="line">        node_version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions&#x2F;checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Checkout theme repo</span><br><span class="line">        uses: actions&#x2F;checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.THEME_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.THEME_BRANCH &#125;&#125;</span><br><span class="line">          path: themes&#x2F;concise</span><br><span class="line"></span><br><span class="line">      - name: Checkout deploy repo</span><br><span class="line">        uses: actions&#x2F;checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.DEPLOY_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.DEPLOY_BRANCH &#125;&#125;</span><br><span class="line">          path: .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line">        uses: actions&#x2F;setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;Asia&#x2F;Shanghai&quot;</span><br><span class="line">          mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line">          cp _config.theme.yml themes&#x2F;concise&#x2F;_config.yml</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm run deploy</span><br></pre></td></tr></table></figure><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><p>在此仓库 <code>Actions</code> 页面查看当前 task。</p><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/run@2x.png" alt="img"></p><p>当任务完成后查看你的博客 <code>https://your.github.io</code>，如果不出意外的话已经可以看到新添加的文章了。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>pros.</p><p>🟢 利用 GitHub Desktop, 可以实现在电脑写作好了，一键 push 到部署。</p><p>🟢 <del>Git 的版本控制可实现文字基本不会丢</del>，当然还是建议和 Dropbox 一同使用以增加安全感。</p><p>🟢 安卓大概可以用纯纯写作来写一下了？</p><p>🟢 自动化操作，幸福感 max.</p><p>🟢 白嫖，幸福感 max plus.</p><p>cons.</p><p>🔴 abbrlink 插件无法针对原文件进行修改，即 header 里不会出现 abbrlink: XXXXX, 对于强迫症不能忍。实际多次 push 后新文章 link 不会变，勉强能接受。</p><p>🔴 如果开启了 “更新于” 功能，所有文章更新时间全都是最新一次 push 的时间了。</p><p>🔴 如果不特意保存 .git 文件夹，则所有 git 历史均被清空，<strong>以上模板就会导致如此</strong>。</p><h1 id="针对遇到的问题及作出的尝试"><a href="#针对遇到的问题及作出的尝试" class="headerlink" title="针对遇到的问题及作出的尝试"></a>针对遇到的问题及作出的尝试</h1><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-Git-历史丢失"><a href="#1-Git-历史丢失" class="headerlink" title="1 Git 历史丢失"></a>1 Git 历史丢失</h3><p>描述：user.github.io 中 commits 历史记录消失，就真的找不回来了。</p><p>原因：GitHub Actions 相当于在一台新电脑里执行 push 操作，自然是不存在以前的 .git 文件的。</p><p>解决方式：已经丢失的找不回来了。还没丢失的，先备份一个吧。workflow里添加几个步骤，将 user.github.io 的 git 记录搬运回来，再执行 push，就可以把新的 commits 加到旧的里面了。</p><h3 id="2-旧文章更新日期被替换为更新日期"><a href="#2-旧文章更新日期被替换为更新日期" class="headerlink" title="2 旧文章更新日期被替换为更新日期"></a>2 旧文章更新日期被替换为更新日期</h3><p>描述：访问文章，可见 “更新于” 的时间为 push 的时间</p><p>原因：Hexo 将 mtime 即文件修改时间，作为了文件的 update 时间。如果在个人电脑上，这个逻辑说得过去，但于 CI 这样的云端，每个文件都是新鲜下载的，时间当然会变。</p><p>解决方式：5.0.0 Hexo 的配置文件 <code>_config.yml</code> 里面的 <code>updated_option: &#39;mtime&#39;</code> 将 mtime 更改为 date</p><h3 id="3-新文章无法添加-abbrlink-到原始文件"><a href="#3-新文章无法添加-abbrlink-到原始文件" class="headerlink" title="3 新文章无法添加 abbrlink 到原始文件"></a>3 新文章无法添加 abbrlink 到原始文件</h3><p>描述：位于私有仓库的新文章，执行 Actions 之后并没有在文章的 header 处增加 abbrlink, 而在公开仓库的新文章多次部署的 abbrlink 均唯一（更改标题后会改变，大概是按标题来运算的），基本不影响访客体验。</p><p>原因：当然是没有 push 到 私人仓库呀。但是如果这样做，又会触发一个 Actions, 陷入无限循环。我的设想是：在 workflow 开头设定筛选，只有用户的 push 才能触发，GitHub Actions BOT 则不能，最后加上由 GitHub Actions BOT 执行 push, 把修改后的文件 push 回私人仓库。</p><p>尝试：看了 GitHub 的指南，没有这个选择。</p><h1 id="最终的-Workflow-文件"><a href="#最终的-Workflow-文件" class="headerlink" title="最终的 Workflow 文件"></a>最终的 Workflow 文件</h1><p><strong>复制粘贴后记得删除#后面的内容呀，出错了我可不负责！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">name: HEXO CI</span><br><span class="line"></span><br><span class="line">on: </span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master #目前 GitHub 已使用 main 来替代 master 分支，自行注意</span><br><span class="line">  watch:</span><br><span class="line">    types: started #此处设置点星星可以执行文件，方便进行向搜索引擎推送或测试</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia&#x2F;Shanghai #时区：上海</span><br><span class="line">  GIT_USER: user #你的 GitHub 用户名，自行替换</span><br><span class="line">  GIT_EMAIL: user@hotmail.com #你的 GitHub 用户邮箱，自行替换</span><br><span class="line">  HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125; #密匙</span><br><span class="line">  GITHUB_REPO: github.com&#x2F;user&#x2F;user.github.io #你的 GitHub 公共仓库地址，自行替换</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    if: github.event.repository.owner.id &#x3D;&#x3D; github.event.sender.id</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest] #选择运行系统</span><br><span class="line">        node_version: [12.x] #选择 Node 版本</span><br><span class="line">    steps:</span><br><span class="line">      - name: Set Timezone to UTC+8 #设置时区</span><br><span class="line">        env: </span><br><span class="line">            DEBIAN_FRONTEND: noninteractive</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;$TZ&quot;</span><br><span class="line"></span><br><span class="line">      - name: Checkout codes #克隆私有仓库代码</span><br><span class="line">        uses: actions&#x2F;checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125; #运行 Node</span><br><span class="line">        uses: actions&#x2F;setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Cache node modules #缓存 Node 模块</span><br><span class="line">        uses: actions&#x2F;cache@v1</span><br><span class="line">        with:</span><br><span class="line">          path: ~&#x2F;.npm</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#39;**&#x2F;package-lock.json&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment #设置 SSH 及 Git</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies #安装 Hexo 及依赖包</span><br><span class="line">        run: |</span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i</span><br><span class="line"></span><br><span class="line">      - name: Genarate hexo </span><br><span class="line">        run: |</span><br><span class="line">          git clone &quot;https:&#x2F;&#x2F;$GITHUB_REPO&quot; public #克隆公开仓库</span><br><span class="line">          git clone &quot;https:&#x2F;&#x2F;$GITHUB_REPO&quot; .deploy_git #克隆公开仓库</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo g</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo blog #部署 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          hexo d</span><br></pre></td></tr></table></figure><p>另外，如果要添加第三方的插件，可直接在 <code>package.json</code> 里定义就行了，简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">推荐使用的插件：</span><br><span class="line">hexo-abbrlink</span><br><span class="line">hexo-deployer-git</span><br><span class="line">hexo-generator-sitemap</span><br><span class="line">hexo-lazyload-image</span><br><span class="line">hexo-submit-urls-to-search-engine</span><br><span class="line">添加之后，参考他们的官方指南，在 _config.yml 或者主题的配置文件中做好修改。</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/marketplace/actions/hexo-action">https://github.com/marketplace/actions/hexo-action</a></p><p><a href="https://hdj.me/github-actions-hexo-cicd/">https://hdj.me/github-actions-hexo-cicd/</a></p><p><a href="https://juejin.im/post/6854573218779381773">https://juejin.im/post/6854573218779381773</a></p><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/</a></p><p><a href="https://xirikm.net/2020/313-1">https://xirikm.net/2020/313-1</a></p><p><a href="https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine.html">https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为最近 4 个月都没有电脑用，而想写点博客也只能在公众号写，无法用自己的电脑部署，不够爽，加上之前有看到可以利用 GitHub Actions 功能进行云编译和部署，遂尝试一下。毕竟未来数月也没有电脑用，总要写点东西打发时间。&lt;/p&gt;
&lt;p&gt;本文适用于在本地电脑已有 Hexo 文件夹的用户，目标是将源文件迁移到 GitHub 中，并使用 GitHub Actions 功能在提交新的文章后自动进行编译与部署，减少操作步骤，提升使用体验。在某种程度上，也避免了对于电脑的依赖。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="GitHub" scheme="https://soacg.pp.ua/tags/GitHub/"/>
    
    <category term="GitHub Actions" scheme="https://soacg.pp.ua/tags/GitHub-Actions/"/>
    
    <category term="Blog" scheme="https://soacg.pp.ua/tags/Blog/"/>
    
    <category term="Hexo" scheme="https://soacg.pp.ua/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>在 Cloudflare 使用 Page Rules 重定向域名</title>
    <link href="https://soacg.pp.ua/posts/37141/"/>
    <id>https://soacg.pp.ua/posts/37141/</id>
    <published>2020-05-11T10:04:47.000Z</published>
    <updated>2020-05-11T10:04:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实之前写的是用 Plesk 面板做重定向的，但考虑到</p><ul><li>.tk 域名以后是不会再用的，保留其实是为了搜索引擎做跳转</li><li>Plesk 面板有流量限制（虽然我不可能被打）</li><li>上了熊大免费的面板，如果被打的话，很不好意思</li></ul><p>此外，直接添加 .tk 到 CF，其实是可以添加解析的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。Cloudflare 更新 Global API 已经一个月，如果他们想修复，是很容易的。但论坛中的工作人员没有做出回应（回复超过自己权限范围肯定不算回复啦），看这样子是拒绝白嫖党了。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1 删除之前在 Partner 中添加的域名，重新在 Dashboard 中添加域名。</p><p>2 更改 Freenom NameServer 地址为 Cloudflare 给出的地址。</p><p>3 等。</p><p>4 在 DNS 中添加一个 CNAME 记录，指向自己的新域名。</p><p>5 Page Rules 中创建 <code>blog.sandinok.tk/*</code> , 选择 Forwarding URL 301 地址填入 <code>https://suu.pp.ua/</code>, 再启用就好了。记得最后的 <code>/</code> 一定要加上。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>使用 http 和 https 均能正常跳转到新的域名，且子域名完全对应之前的。搜索引擎爬虫效果未知。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>讲真，免费的 TLDs 就那么几个， CF 还直接禁止 API 了，国内国外的网友都很难受。论坛中的外国网友提供了几个解决方法，然而都是需要钱的。一个月 20 刀去买一个 Pro 套餐？真是方向错了。如果这样的情况继续发展的话，可能那些免费的 SLDs 也会被禁用了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;其实之前写的是用 Plesk 面板做重定向的，但考虑到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.tk 域名以后是不会再用的，保留其实是为了搜索引擎做跳转&lt;/li&gt;
&lt;li&gt;Plesk 面板有流量限制（虽然我不可能被打）&lt;/li&gt;
&lt;li&gt;上了熊大免费的面板，如果被打的话，很不好意思&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，直接添加 .tk 到 CF，其实是可以添加解析的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。Cloudflare 更新 Global API 已经一个月，如果他们想修复，是很容易的。但论坛中的工作人员没有做出回应（回复超过自己权限范围肯定不算回复啦），看这样子是拒绝白嫖党了。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Cloudflare" scheme="https://soacg.pp.ua/tags/Cloudflare/"/>
    
    <category term="域名" scheme="https://soacg.pp.ua/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="301" scheme="https://soacg.pp.ua/tags/301/"/>
    
  </entry>
  
  <entry>
    <title>通过 301 重定向，把 .tk 域名重定向到新域名</title>
    <link href="https://soacg.pp.ua/posts/13996/"/>
    <id>https://soacg.pp.ua/posts/13996/</id>
    <published>2020-05-09T08:16:19.000Z</published>
    <updated>2020-05-09T08:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继上一篇的 Cloudflare 拒绝 <code>.tk</code> 等一系列免费域名（好像真的有付费的 <code>.tk</code>, 但我没见过）之后，我决定扔掉 <code>.tk</code> 了。当然，像我这么穷的人，自然又去找了免费域名 <code>.pp.ua</code>, 来自乌克兰的免费域名，同时又去申请了 <code>.eu.org</code> 的域名。搞笑的是，<code>.pp.ua</code> 直接全域被加入到广告网站屏蔽列表里了，申请之后打不开，是排除到后来才发现的。在等待 <code>.eu.org</code> 域名获批前，暂时用着 <code>.pp.ua</code> 域名好了。</p><p>这篇文是通过更改 DNS NameServer 提供商，使用 URL Redirect (Permanent / 301) 来到达把旧域名重新定位到新的域名上，尽量减少搜索引擎蜘蛛访问错误而降权（其实也没几个访问）。</p><p><strong>更新：直接添加 .tk 到 CF，是可以使用的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。</strong></p><a id="more"></a><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><p>好累啊，不想写了。用表格吧。</p><table><thead><tr><th>提供商</th><th>能否接入 <code>.tk</code></th><th>免费</th><th>URL Redirect (301)</th></tr></thead><tbody><tr><td>DNSPod</td><td>√</td><td>√</td><td>要备案</td></tr><tr><td>DNSPod 国际版</td><td>× (验证邮箱收不到，传闻国际版团队被砍了)</td><td>?</td><td>?</td></tr><tr><td>NameSilo</td><td>× (没在他家买)</td><td>?</td><td>?</td></tr><tr><td>HE.net</td><td>×</td><td>?</td><td>?</td></tr><tr><td>NameCheap</td><td>√</td><td>√</td><td>√</td></tr><tr><td>DNS.com</td><td>√</td><td>√</td><td>×</td></tr><tr><td>阿里云</td><td>√</td><td>√</td><td>要备案</td></tr></tbody></table><p>综上，使用 NameCheap 接入即可。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1 NameCheap–Domains–FreeDNS 输入域名，Get DNS</p><p>2 Freenom–Client Area–Management Tools–Use custom nameservers (enter below)–输入 NameCheap 提供的地址（即 <code>freedns[1到5].registrar-servers.com</code>）</p><p>3 等</p><p>4 NameCheap Dashboard–Domain List–All Products–MANAGE–Advanced DNS</p><p>5 添加如下，以我自己为例，需要 <code>blog.sandinok.tk</code> 跳转到 <code>suu.pp.ua</code></p><table><thead><tr><th>Type</th><th>Host</th><th>Value</th><th>TTL</th></tr></thead><tbody><tr><td>URL Redirect Record</td><td>blog</td><td><code>https://suu.pp.ua/</code>       Permanent (301)</td><td></td></tr></tbody></table><p><strong>注意：</strong> 如果你想让你博客子页面（比如 /2020/02/23/page.html）自动跳转的话，一定在后面加上 <code>/</code> 这个符号。否则所有页面均跳转到主页面。此外通配符的跳转设定可以查看 NameCheap 的说明。还有，<code>301</code> <code>302</code> <code>masked</code> 三种重定向有区别，自行按需调整。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>访问 <code>http://blog.sandinok.tk</code> 可以跳转到新的博客地址，而使用 <code>https</code> 则不行。对搜索引擎效果暂时未知。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;继上一篇的 Cloudflare 拒绝 &lt;code&gt;.tk&lt;/code&gt; 等一系列免费域名（好像真的有付费的 &lt;code&gt;.tk&lt;/code&gt;, 但我没见过）之后，我决定扔掉 &lt;code&gt;.tk&lt;/code&gt; 了。当然，像我这么穷的人，自然又去找了免费域名 &lt;code&gt;.pp.ua&lt;/code&gt;, 来自乌克兰的免费域名，同时又去申请了 &lt;code&gt;.eu.org&lt;/code&gt; 的域名。搞笑的是，&lt;code&gt;.pp.ua&lt;/code&gt; 直接全域被加入到广告网站屏蔽列表里了，申请之后打不开，是排除到后来才发现的。在等待 &lt;code&gt;.eu.org&lt;/code&gt; 域名获批前，暂时用着 &lt;code&gt;.pp.ua&lt;/code&gt; 域名好了。&lt;/p&gt;
&lt;p&gt;这篇文是通过更改 DNS NameServer 提供商，使用 URL Redirect (Permanent / 301) 来到达把旧域名重新定位到新的域名上，尽量减少搜索引擎蜘蛛访问错误而降权（其实也没几个访问）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新：直接添加 .tk 到 CF，是可以使用的，但不能使用动态 DNS 和自选 IP. 所以直接添加后，使用Page Rules 重定向就行了。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Cloudflare" scheme="https://soacg.pp.ua/tags/Cloudflare/"/>
    
    <category term="域名" scheme="https://soacg.pp.ua/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="301" scheme="https://soacg.pp.ua/tags/301/"/>
    
    <category term="NameCheap" scheme="https://soacg.pp.ua/tags/NameCheap/"/>
    
    <category term="DNSPod" scheme="https://soacg.pp.ua/tags/DNSPod/"/>
    
  </entry>
  
  <entry>
    <title>白嫖党的大溃败</title>
    <link href="https://soacg.pp.ua/posts/55905/"/>
    <id>https://soacg.pp.ua/posts/55905/</id>
    <published>2020-05-02T03:05:02.000Z</published>
    <updated>2020-05-02T03:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cloudflare-拒绝了免费域名"><a href="#Cloudflare-拒绝了免费域名" class="headerlink" title="Cloudflare 拒绝了免费域名"></a>Cloudflare 拒绝了免费域名</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You cannot use this API for domains with a .cf, .ga, .gq, .ml, or .tk TLD (top-level domain). To configure (truncated...)</span><br></pre></td></tr></table></figure><p>我的  <code>.tk</code> 域名不能在 Cloudflare 添加解析了，大溃败。</p><p>又错过了 5 刀 10 年的 <code>.xyz</code>.</p><p>现在只能去嫖一年的 <code>.me</code> 或者 <code>.tech</code> 了。</p><p>有钱真好，我也想有钱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cloudflare-拒绝了免费域名&quot;&gt;&lt;a href=&quot;#Cloudflare-拒绝了免费域名&quot; class=&quot;headerlink&quot; title=&quot;Cloudflare 拒绝了免费域名&quot;&gt;&lt;/a&gt;Cloudflare 拒绝了免费域名&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>删除、修改一些文章</title>
    <link href="https://soacg.pp.ua/posts/52400/"/>
    <id>https://soacg.pp.ua/posts/52400/</id>
    <published>2020-04-23T09:08:43.000Z</published>
    <updated>2020-04-23T09:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有说"><a href="#有说" class="headerlink" title="有说"></a>有说</h1><p>随着人类的开发，地球上无人的地方越来越少，亚马逊森林被也大片破坏，北极、南极动物家园尽丧。我忧思重重却无能为力。难道以后要有个动物园叫做“地球动物园”么？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有说&quot;&gt;&lt;a href=&quot;#有说&quot; class=&quot;headerlink&quot; title=&quot;有说&quot;&gt;&lt;/a&gt;有说&lt;/h1&gt;&lt;p&gt;随着人类的开发，地球上无人的地方越来越少，亚马逊森林被也大片破坏，北极、南极动物家园尽丧。我忧思重重却无能为力。难道以后要有个动物园叫做“地</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在 Sublime 中批处理技巧的记录</title>
    <link href="https://soacg.pp.ua/posts/56234/"/>
    <id>https://soacg.pp.ua/posts/56234/</id>
    <published>2020-04-15T14:35:52.000Z</published>
    <updated>2020-04-15T14:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常记录在 Sublime 中遇到的问题，以及批处理的技巧。</p><a id="more"></a><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><h2 id="批量选择含有特定字符的行，并删除"><a href="#批量选择含有特定字符的行，并删除" class="headerlink" title="批量选择含有特定字符的行，并删除"></a>批量选择含有特定字符的行，并删除</h2><p>比如在筛选 IP 时，以 <code>.0</code> 结尾的 IP 应该删除，但在某些软件的自动生成中缺少这个功能。</p><p>以如下 IP 段举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.0&#x2F;24</span><br><span class="line">1.2.5.0&#x2F;24</span><br></pre></td></tr></table></figure><p>转换出来的 IP 清单为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.0</span><br><span class="line">127.0.0.1</span><br><span class="line">...</span><br><span class="line">127.0.0.255</span><br><span class="line">1.2.5.0</span><br><span class="line">1.2.5.1</span><br><span class="line">...</span><br><span class="line">1.2.5.255</span><br></pre></td></tr></table></figure><p>所以可以使用 Sublime 进行处理，删除以 <code>.0</code> 结尾的行。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>以鼠标选中 <code>.0</code>，使用 <code>Alt</code> + <code>F3</code> 的快捷方式，选择所有的 <code>.0</code>，再使用 <code>Ctrl</code> + <code>L</code>，选中所有含 <code>.0</code> 的行，然后按 <code>Delete</code>.</p><p>（Sublime 自动选择了换行符，所以删除时候是连同换行一起删除，省去再删除空白行的麻烦。）</p><h2 id="在行首、行尾或特定区域加入文字"><a href="#在行首、行尾或特定区域加入文字" class="headerlink" title="在行首、行尾或特定区域加入文字"></a>在行首、行尾或特定区域加入文字</h2><p>如果需要批量 <code>curl</code> 的话，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.a.com</span><br><span class="line">www.b.com</span><br></pre></td></tr></table></figure><p>那么方法一是把以上 IP 作为一个文本保存，使用 <code>-K</code> 参数，但是需要手动添加，指定 <code>url</code> 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;&quot;www.a.com&quot;</span><br><span class="line">url&#x3D;&quot;www.b.com&quot;</span><br></pre></td></tr></table></figure><p>但是若是以上 IP 并非标准端口，或者需要 <code>curl</code> 到特定目录，比如 <code>/subfolder/test</code> 呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.a.com:8888&#x2F;subfolder&#x2F;test</span><br><span class="line">www.b.com:8888&#x2F;subfolder&#x2F;test</span><br></pre></td></tr></table></figure><p>可以看到都需要去更改原始的列表。</p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><h4 id="单行编辑"><a href="#单行编辑" class="headerlink" title="单行编辑"></a>单行编辑</h4><p>在 Windows 下，可以使用 <code>HOME</code> 移动光标到行首，<code>END</code> 到行尾。</p><h4 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h4><p><code>Shift</code> 加鼠标右键，划出要添加的行：</p><p>​    可以选择需要编辑的部分，比如行首，行的中间几个字符位。如果需要行尾编辑，则再使用 <code>→</code> 键</p><h4 id="所有行编辑"><a href="#所有行编辑" class="headerlink" title="所有行编辑"></a>所有行编辑</h4><p><code>Ctrl</code> 加 <code>A</code> 选中所有文字, <code>Ctrl</code> 加 <code>Shift</code> 加 <code>L</code> 选中所有行：</p><p>​    <code>→</code>, 在所有行尾编辑。</p><p>​    <code>←</code>, 在所有行首编辑。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;日常记录在 Sublime 中遇到的问题，以及批处理的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="技巧" scheme="https://soacg.pp.ua/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="软件" scheme="https://soacg.pp.ua/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Sublime" scheme="https://soacg.pp.ua/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Action 定制 LEDE Openwrt K2P 路由固件</title>
    <link href="https://soacg.pp.ua/posts/16454/"/>
    <id>https://soacg.pp.ua/posts/16454/</id>
    <published>2020-04-02T03:37:24.000Z</published>
    <updated>2020-04-02T03:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>脱离了校园网环境了，家里白嫖了移动宽带，所以需要一个路由器来实现一些想要的功能。之前的 K2P 刚好拿来折腾一下下。然而，Hiboy 的固件功能过于丰富，ChongShengB 的固件中的 SmartDNS 和 AdGuard Home 在长时间（几个小时）的运行后，都会失效，出现没有 DNS 解析的问题，恩山论坛上倒是有个固件不错，但没有去广告功能，所以生出自己定制固件的想法，今天基本完成了，所以写个文章记录一下。</p><p><strong>更新1.0：</strong>修改并简化操作</p><p><strong>更新1.1：</strong>修复重启后 WiFi 未开启的 Bug</p><p><strong>更新1.2：</strong>修改闪存部分勘误</p><a id="more"></a><h1 id="路由基本信息"><a href="#路由基本信息" class="headerlink" title="路由基本信息"></a>路由基本信息</h1><p>K2P 硬改，32M 闪存，512M 内存，USB 3.0</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>之前定制 ChongshengB 的固件就不写了，这里写定制 LEDE 的 Openwrt.</p><p>本着不造轮子的想法，检索了一下，发现有现成的脚本，使用了 Github Action 功能进行云编译，不占用本地资源。</p><p>总的来说，需要 Fork 一下 P3terx 仓库，自行修改 <code>.config</code>  <code>diy.sh</code> 和 <code>.yml</code>.</p><h2 id="P3terx仓库"><a href="#P3terx仓库" class="headerlink" title="P3terx仓库"></a>P3terx仓库</h2><p><strong>P3大佬又更新了仓库，我这文章不想改了，基本原理是一样的。</strong></p><p>需添加 <code>.config</code> 文件以决定要不要软件，说明我就不写了，人家写得很清楚。</p><p>建议第一次云编译，保存种子配置之后好修改。</p><p>另外，对于没自定义却自己带的软件，可增添如下配置以取消：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_PACKAGE_luci-app-vlmcsd&#x3D;n</span><br><span class="line">CONFIG_PACKAGE_luci-i18n-vlmcsd-zh-cn&#x3D;n</span><br><span class="line">CONFIG_PACKAGE_vlmcsd&#x3D;n</span><br></pre></td></tr></table></figure><p><code>diy.sh</code> 脚本还可以修改默认路由管理地址以避免和光猫冲突。</p><p>以下更改为了192.168.2.1，可自行更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;192.168.1.1&#x2F;192.168.2.1&#x2F;g&#39; package&#x2F;base-files&#x2F;files&#x2F;bin&#x2F;config_generate</span><br></pre></td></tr></table></figure><p><strong>坑</strong>：我是 32M 闪存，然而 LEDE 那里编译的默认是 16M 闪存的，所以需要自行修改编译固件大小：</p><p>编辑 <code>diy.sh</code> 添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;0xf60000&#x2F;0x1f60000&#x2F;g&#39; target&#x2F;linux&#x2F;ramips&#x2F;dts&#x2F;mt7621_phicomm_k2p.dts</span><br><span class="line">sed -i &#39;s&#x2F;15744k&#x2F;32448k&#x2F;g&#39; target&#x2F;linux&#x2F;ramips&#x2F;image&#x2F;mt7621.mk</span><br></pre></td></tr></table></figure><p>第一行计算方式为：</p><p>32M 闪存 = 32x1024x1024 = 33554432k (16 进制为 0x2000000),</p><p>去除掉之前留给 u-boot 等的空间 (0x0 - 0xa0000),</p><p>剩余则为 0x1f60000</p><p>第二行为修改固件最大大小，避免生成固件失败，同样改为 32M，留一点空余的话：32488＜32768</p><p><a href="https://github.com/P3TERX/Actions-OpenWrt">仓库地址</a></p><h2 id="AdGuard-Home-luci-app"><a href="#AdGuard-Home-luci-app" class="headerlink" title="AdGuard Home luci app"></a>AdGuard Home luci app</h2><p>由于 LEDE 没有 AdGuard Home，倒是有 Adbyby Plus，但实测不好用。所以我是要自定义去除 Adbyby Plus，添加 AdGuard Home.</p><p>在 P3terx 的 <code>.config</code> 里添加</p><p><code>CONFIG_PACKAGE_luci-app-adguardhome=y</code></p><p>然后在 <code>diy.sh</code> 里添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rufengsuixing&#x2F;luci-app-adguardhome package&#x2F;lean&#x2F;luci-app-adguardhome&#x2F;</span><br><span class="line">.&#x2F;scripts&#x2F;feeds update -a</span><br><span class="line">.&#x2F;scripts&#x2F;feeds install -a</span><br></pre></td></tr></table></figure><p><strong><em>PS:</em></strong> 这里和 P3 的说明不一样。 反正 git clone 后面不加目录就不会编译进去，那就加一个目录咯。</p><p><a href="https://github.com/rufengsuixing/luci-app-adguardhome">仓库地址</a></p><h2 id="编译完成后的设置"><a href="#编译完成后的设置" class="headerlink" title="编译完成后的设置"></a>编译完成后的设置</h2><p>SSH 连接并执行</p><p><code>df -h</code></p><p>可以看见是 32M 的固件大小了，不需要担心 AdGuard Home 的过滤器太多放不下。</p><h3 id="AdGuard-Home-设置"><a href="#AdGuard-Home-设置" class="headerlink" title="AdGuard Home 设置"></a>AdGuard Home 设置</h3><p>更新 AdGuard Home 内核。 </p><p>使用 “作为 dnsmasq 的上游服务器”。</p><p>转到 <code>手动设置</code> 里，修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port: 5335</span><br><span class="line">blocked_response_ttl: 60</span><br></pre></td></tr></table></figure><p>再启用。</p><p>进入 AdGuard Home 网页管理界面，更改 DNS 和过滤器：</p><p>DNS (个人用):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dns.alidns.com&#x2F;dns-query</span><br><span class="line">tls:&#x2F;&#x2F;dns.google</span><br><span class="line">https:&#x2F;&#x2F;i.233py.com&#x2F;dns-query</span><br><span class="line">https:&#x2F;&#x2F;dns.cloudflare.com&#x2F;dns-query</span><br><span class="line">tls:&#x2F;&#x2F;1.1.1.1</span><br><span class="line">240c::6666</span><br></pre></td></tr></table></figure><p>过滤器 (个人用)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;halflife&#x2F;list&#x2F;raw&#x2F;master&#x2F;ad.txt</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;vokins&#x2F;yhosts&#x2F;hosts</span><br><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;vokins&#x2F;yhosts&#x2F;master&#x2F;data&#x2F;tvbox.txt</span><br><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;privacy-protection-tools&#x2F;anti-ad&#x2F;raw&#x2F;master&#x2F;easylist.txt</span><br><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;xinggsf&#x2F;Adblock-Rule&#x2F;raw&#x2F;master&#x2F;rule.txt</span><br><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;banbendalao&#x2F;adguard&#x2F;raw&#x2F;master&#x2F;ADgk.txt</span><br><span class="line">https:&#x2F;&#x2F;adguardteam.github.io&#x2F;AdGuardSDNSFilter&#x2F;Filters&#x2F;filter.txt</span><br><span class="line">https:&#x2F;&#x2F;adaway.org&#x2F;hosts.txt</span><br><span class="line">https:&#x2F;&#x2F;hosts.nfz.moe&#x2F;full&#x2F;hosts</span><br><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;StevenBlack&#x2F;hosts&#x2F;master&#x2F;hosts</span><br></pre></td></tr></table></figure><p><strong><em>强烈建议：</em></strong>在测试 AdGuard Home 运行成功并且稳定之后，把 <code>日志</code> 关闭，否则闪存空间非常容易被塞满。</p><p>设定完成后，才可以启动 SSR.</p><h3 id="IPV6的设置"><a href="#IPV6的设置" class="headerlink" title="IPV6的设置"></a>IPV6的设置</h3><p>只需要把光猫的拨号更改为桥接，使用 K2P 拨号，就会自动分配 IPV6 地址了。</p><p>然后在 <code>网络----DHCP/DNS----高级设置</code> 里，取消打钩 <code>禁止解析 IPv6 DNS 记录</code>。</p><p>IPV6 的 DNS 可以添加在 AdGuard Home 里面。</p><p>最后，去 <a href="https://test-ipv6.com/">https://test-ipv6.com</a> 测试一下就好了。</p><hr><p>（因为目前 IPV6 的路由满世界瞎跑，所以我禁止掉了 IPV6 解析，只留下了分配 IPV6 地址，这样有时候需要 ping 一下，也不用麻烦。）</p><h1 id="自动重启后，WiFi-未开启"><a href="#自动重启后，WiFi-未开启" class="headerlink" title="自动重启后，WiFi 未开启"></a>自动重启后，WiFi 未开启</h1><p>这个问题在我 Build 固件后复现率非常高。</p><p>经过 Google 后，发现如果在启动项加入重启 WiFi 的几条命令后，问题得以解决。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h3><p>如果你已经编译好了，不想再折腾了，或者是用的其他人的固件，那么选择手动添加吧。</p><p><code>系统--启动项--本地启动脚本</code></p><p>添加如下命令，一定是要放在 <code>exit 0</code> 之前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifconfig rax0 up</span><br><span class="line">ifconfig ra0 up</span><br><span class="line">ifconfig apclix0 up</span><br><span class="line">ifconfig apcli0 up</span><br></pre></td></tr></table></figure><h3 id="在编译时的-diy-sh-添加"><a href="#在编译时的-diy-sh-添加" class="headerlink" title="在编译时的 diy.sh 添加"></a>在编译时的 diy.sh 添加</h3><p>在 <code>diy.sh</code> 中，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fix WiFi disabled after reboot</span><br><span class="line">sed -i &quot;2a\ifconfig rax0 up\nifconfig ra0 up\nifconfig apclix0 up\nifconfig apcli0 up&quot; package&#x2F;base-files&#x2F;files&#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure><p>这样编译出来的固件就会带以上命令，无需手动添加了。</p><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ul><li><p>定时重启</p></li><li><p>AdGuard Home 广告过滤</p></li><li><p>这里和谐了</p></li><li><p>UPnP</p></li><li><p>Turbo ACC</p></li><li><p>IPV6</p></li><li><p>管理页面为192.168.2.1</p></li></ul><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><p>Q: 为什么没有带 USB 功能？</p><p>A: 因为个人用不到 NAS、打印机、无线网卡等功能，精简之后更稳定且留出空间给过滤器。</p><p>Q: AdGuard Home 功能怎么样？</p><p>A: 添加以上 10 个列表之后，我访问的网站能过滤很多广告，在 <a href="https://checkadblock.ru/">https://checkadblock.ru</a> 上能得到 71/100 的分数，对于防护网站默认开启的追踪功能也有一定作用。但对于 <code>和谐视频网站</code> 的网页和视频开头广告没有效果。<del>对于 DNS 分流，基本没用，建议折腾 SmartDNS 去。</del> AdGuard Home 更新了一个 <code>“最快的 IP 地址”</code> 选项，可以查询并返回响应最快的地址，原理类似于 SmartDNS。SmartDNS 已经不更新了，使用 AdGuard Home 在一定程度上可以替代，且在开发组开发和大家的反馈下，功能应该会更好。</p><p>Q: <code>和谐功能</code> 效果怎么样？</p><p>A: 由于 K2P 的 CPU 性能不足，无法发挥我的 <code>和谐</code> 线路的实力，开启多线程后，下载可以达到 3.3M/s 的速度，基本满足 1080P 视频和日常聊天的需要。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></p><p><a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html">https://p3terx.com/archives/build-openwrt-with-github-actions.html</a></p><p><a href="https://blog.csdn.net/xbgzytb/article/details/104775879">https://blog.csdn.net/xbgzytb/article/details/104775879</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;脱离了校园网环境了，家里白嫖了移动宽带，所以需要一个路由器来实现一些想要的功能。之前的 K2P 刚好拿来折腾一下下。然而，Hiboy 的固件功能过于丰富，ChongShengB 的固件中的 SmartDNS 和 AdGuard Home 在长时间（几个小时）的运行后，都会失效，出现没有 DNS 解析的问题，恩山论坛上倒是有个固件不错，但没有去广告功能，所以生出自己定制固件的想法，今天基本完成了，所以写个文章记录一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新1.0：&lt;/strong&gt;修改并简化操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新1.1：&lt;/strong&gt;修复重启后 WiFi 未开启的 Bug&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新1.2：&lt;/strong&gt;修改闪存部分勘误&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Openwrt" scheme="https://soacg.pp.ua/tags/Openwrt/"/>
    
    <category term="LEDE" scheme="https://soacg.pp.ua/tags/LEDE/"/>
    
    <category term="Github Action" scheme="https://soacg.pp.ua/tags/Github-Action/"/>
    
    <category term="路由器" scheme="https://soacg.pp.ua/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="K2P" scheme="https://soacg.pp.ua/tags/K2P/"/>
    
  </entry>
  
  <entry>
    <title>索尼Z3+刷Lineage后无法使用电信4G的解决方法</title>
    <link href="https://soacg.pp.ua/posts/32481/"/>
    <id>https://soacg.pp.ua/posts/32481/</id>
    <published>2017-11-17T09:37:35.000Z</published>
    <updated>2017-11-17T09:37:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前忍受不了官方固件的臃肿，试过Lineage，但却发现并不能支持电信4G，于是匆忙放弃。</p><p>而现在是真的忍不了了，恰好Lineage有官方支持了，所以刷了一个继续用。</p><p>但是依旧是不支持4G，开机从有信号闪了一下就是空白了。所以搜索了一下资料，发现了有人解决了Lineage的问题，所以这里是搬运一下而已。实质上是锁定SIM卡的网络制式。</p><a id="more"></a><h2 id="需要的东西"><a href="#需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h2><p>Root权限</p><p>RE浏览器(或者类似能获取Root编辑权限的软件)</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>定位到/system/build.prop，编辑，找到ro.telephony.default_network,当然，如果没有就自己创建一个。</p><p>格式：ro.telephony.default_network=卡一网络,卡二网络</p><p>例如：ro.telephony.default_network=11,1 </p><p>而我用的是电信4G+移动2G，所以上面的参数就这样设定。</p><pre><code>关于数字代表的网络如下。NETWORK_MODE_WCDMA_PREF     = 0; /* GSM/WCDMA (WCDMA 优先) */  NETWORK_MODE_GSM_ONLY       = 1; /* 仅GSM */  NETWORK_MODE_WCDMA_ONLY     = 2; /* 仅WCDMA */  NETWORK_MODE_GSM_UMTS       = 3; /* GSM/WCDMA (通过PRL的自动模式)                                     可在设置菜单里选择*/  NETWORK_MODE_CDMA           = 4; /* CDMA and EvDo (通过PRL的自动模式)                                     可在设置菜单里选择*/  NETWORK_MODE_CDMA_NO_EVDO   = 5; /* 仅CDMA */  NETWORK_MODE_EVDO_NO_CDMA   = 6; /* 仅EvDo */  NETWORK_MODE_GLOBAL         = 7; /* GSM/WCDMA, CDMA, and EvDo (通过PRL的自动模式)                                         可在设置菜单里选择*/  NETWORK_MODE_LTE_CDMA_EVDO  = 8; /* LTE, CDMA and EvDo */  NETWORK_MODE_LTE_GSM_WCDMA  = 9; /* LTE, GSM/WCDMA */  NETWORK_MODE_LTE_CMDA_EVDO_GSM_WCDMA = 10; /* LTE, CDMA, EvDo, GSM/WCDMA */  NETWORK_MODE_LTE_ONLY       = 11; /* 仅LTE */  NETWORK_MODE_LTE_WCDMA      = 12; /* LTE/WCDMA */  NETWORK_MODE_TD_SCDMA_ONLY            = 13; /* 仅TD-SCDMA */  NETWORK_MODE_TD_SCDMA_WCDMA           = 14; /* TD-SCDMA and WCDMA */  NETWORK_MODE_TD_SCDMA_LTE             = 15; /* TD-SCDMA and LTE */  NETWORK_MODE_TD_SCDMA_GSM             = 16; /* TD-SCDMA and GSM */  NETWORK_MODE_TD_SCDMA_GSM_LTE         = 17; /* TD-SCDMA,GSM and LTE */  NETWORK_MODE_TD_SCDMA_GSM_WCDMA       = 18; /* TD-SCDMA, GSM/WCDMA */  NETWORK_MODE_TD_SCDMA_WCDMA_LTE       = 19; /* TD-SCDMA, WCDMA and LTE */  NETWORK_MODE_TD_SCDMA_GSM_WCDMA_LTE   = 20; /* TD-SCDMA, GSM/WCDMA and LTE */  NETWORK_MODE_TD_SCDMA_CDMA_EVDO_GSM_WCDMA  = 21; /*TD-SCDMA,EvDo,CDMA,GSM/WCDMA*/  NETWORK_MODE_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA = 22; /* TD-SCDMA/LTE/GSM/WCDMA, CDMA, and EvDo */</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>对于新刷的Lineage，请<strong>完全备份</strong>了你的应用等等之后，再进项更改锁定，锁定完毕后，进入TWRP，进行清除，恢复出厂设置，开机后，就可以看见网络被更改了。<br>对于更新的Lineage，一次更改后，以后的更新就不必再改了，哪怕built.prop里面没有锁定网络的行，也是能够使用的。</p><h2 id="引用资料"><a href="#引用资料" class="headerlink" title="引用资料"></a>引用资料</h2><pre><code>http://blog.csdn.net/tony_anmoo/article/details/18707015https://github.com/aqutor/Cyanogenmod-cancro/wiki/%E9%BB%98%E8%AE%A4%E7%BD%91%E7%BB%9C%E5%88%B6%E5%BC%8F%E4%BF%AE%E6%94%B9%EF%BC%88%E7%94%B5%E4%BF%A1-3G-%E7%94%A8%E6%88%B7%E5%8F%AF%E7%94%A8%EF%BC%89-Modify-Default-Network-Option</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;之前忍受不了官方固件的臃肿，试过Lineage，但却发现并不能支持电信4G，于是匆忙放弃。&lt;/p&gt;
&lt;p&gt;而现在是真的忍不了了，恰好Lineage有官方支持了，所以刷了一个继续用。&lt;/p&gt;
&lt;p&gt;但是依旧是不支持4G，开机从有信号闪了一下就是空白了。所以搜索了一下资料，发现了有人解决了Lineage的问题，所以这里是搬运一下而已。实质上是锁定SIM卡的网络制式。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="lineage" scheme="https://soacg.pp.ua/tags/lineage/"/>
    
    <category term="lte" scheme="https://soacg.pp.ua/tags/lte/"/>
    
    <category term="4g" scheme="https://soacg.pp.ua/tags/4g/"/>
    
    <category term="索尼" scheme="https://soacg.pp.ua/tags/%E7%B4%A2%E5%B0%BC/"/>
    
    <category term="Z3+" scheme="https://soacg.pp.ua/tags/Z3/"/>
    
    <category term="Z4" scheme="https://soacg.pp.ua/tags/Z4/"/>
    
    <category term="E6533" scheme="https://soacg.pp.ua/tags/E6533/"/>
    
  </entry>
  
  <entry>
    <title>RosettaStone</title>
    <link href="https://soacg.pp.ua/posts/28651/"/>
    <id>https://soacg.pp.ua/posts/28651/</id>
    <published>2017-04-02T16:54:20.000Z</published>
    <updated>2017-04-02T16:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>学习新语言的方法与您学习母语的方法相同。有趣直观的浸入式的课程，教您用新的语言说话和思考。自然地发展基本的语言技能，无需依赖翻译和死记硬背！从一开始，您将用新的语言说话。您甚至还将收到我们独有的语音识别技术针对您的发音提供的反馈。</p><p>通过由语言学习方面的专家设计的有趣且可自定进度的课程，您可以学习包括西班牙语、汉语、日语、英语、德语、法语和意大利语在内的 24 种语言中的一种。全世界数百万的人使用我们的语言应用程序。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>语言是一种工具，能连接你和别人的思维。就我个人学习英语的经历而言，学得越多，了解得越多，才知道自己不知道的更多。从百度搜索转移到谷歌搜索，再后来使用英文来搜索，这才知晓英语的简洁、直接和重要性。</p><p>而对于别的语言，我也很感兴趣。几年前也用过Rosetta Stone的电脑版本，惭愧，盗版，但是却是一种新的学习语言的方法。因电脑原因，我并没有使用几天。现在，Rosseta Stone有了移动端，而且用户体验做得很棒，再者，手机配麦克风也是常态了，为什么不可以好好利用这个软件呢？再次，用盗版很惭愧，但是正版的内购真的很贵。以下来自于AppStore,安卓好像也这个价格吧。</p><pre><code>热门 App 内购买项目英语(美国)(5个级别)¥1,298.00英语(美国)(5个级别)¥1,298.00英语(英国)(5个级别)¥1,298.00日语(3个级别)¥848.00法语(5个级别)¥1,298.00德语(5个级别)¥1,298.00日语(3个级别)¥848.00法语(5个级别)¥1,298.00西班牙语(西班牙)(5个级别)¥1,298.00英语(英国)(5个级别)¥1,298.00</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://pan.baidu.com/s/1gf1fiQB">cracked_w4ih</a></p><p><a href="https://pan.baidu.com/s/1c2cODR6">backup_s6jk</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.安卓系统。</p><p>2.ROOT 权限</p><p>3.钛备份</p><p>4.辛运破解器（可选）</p><p>5.文件管理器，比如RE浏览器</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>下载链接中的东西，记着位置就好。然后下载正常的rs3.0.2版本，安装。</p><p>使用钛备份备份一次，卸载软件，把下载的三个备份转移到钛备份目录，把名字改成刚才备份的，覆盖。</p><p>安装幸运破解器破解过的apk，完毕后使用钛备份恢复备份。</p><p>进入软件，退出登陆，自己登陆自己的账号就是了。</p><p>2017/4/20 21:25:22 补充</p><p>3.10版本也有方法可以用哟。</p><p>按以上步骤  最后使用钛备份恢复数据 数据 数据 就行了。</p><p>对于3.11，暂未尝试。</p><p>2017/4/21 21:34:42 补充</p><p>我今日测试了3.11版本，昨日的方法有效。我暂且推测在小版本更新中，这种方法应该会有用。</p><p>2017/9/1 11:48:32 补充</p><p>之后的版本貌似失效了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;学习新语言的方法与您学习母语的方法相同。有趣直观的浸入式的课程，教您用新的语言说话和思考。自然地发展基本的语言技能，无需依赖翻译和死记硬背！从一开始，您将用新的语言说话。您甚至还将收到我们独有的语音识别技术针对您的发音提供的反馈。&lt;/p&gt;
&lt;p&gt;通过由语言学习方面的专家设计的有趣且可自定进度的课程，您可以学习包括西班牙语、汉语、日语、英语、德语、法语和意大利语在内的 24 种语言中的一种。全世界数百万的人使用我们的语言应用程序。&lt;/p&gt;</summary>
    
    
    
    <category term="应用" scheme="https://soacg.pp.ua/categories/%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="app" scheme="https://soacg.pp.ua/tags/app/"/>
    
    <category term="安卓" scheme="https://soacg.pp.ua/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="福利" scheme="https://soacg.pp.ua/tags/%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>ipv6路由解决方案</title>
    <link href="https://soacg.pp.ua/posts/19219/"/>
    <id>https://soacg.pp.ua/posts/19219/</id>
    <published>2017-03-18T05:32:30.000Z</published>
    <updated>2017-03-18T05:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇解决校园网使用ipv6冲浪的文章后，路由成为了一个新的问题。普通路由一般是不支持IPV6或者不支持IPV6穿透的，所以我基于我的网络环境说说我的方法吧。</p><p>首先，我的端口是校园网的（废话），支持V4/V6，V4需要进行网页登陆认证（dr.com），V6则不需要。</p><a id="more"></a><h3 id="检测自己的V6是否可用"><a href="#检测自己的V6是否可用" class="headerlink" title="检测自己的V6是否可用"></a>检测自己的V6是否可用</h3><p>v6有很多的站点，在不拨号的情况下访问</p><blockquote><p>bt.byr.cn</p></blockquote><blockquote><p>bt.neu6.edu.cn</p></blockquote><p>如果能成功进入，则代表V6可以正常运行。</p><h3 id="路由的选择"><a href="#路由的选择" class="headerlink" title="路由的选择"></a>路由的选择</h3><p>现在路由也进入智能化时代了，能有各种各样的功能。当然，前提是不要买坑爹的路由。</p><h4 id="diy路由"><a href="#diy路由" class="headerlink" title="diy路由"></a>diy路由</h4><p>此种路由是由正常的（阉割得不厉害的）路由拆下原来的ROM/RAM，再焊一个更大的上去</p><p>如果有动手能力，可以自己玩</p><p>通过某些购物网站可以买到此种路由，价格在几十到两百之间</p><h4 id="品牌路由"><a href="#品牌路由" class="headerlink" title="品牌路由"></a>品牌路由</h4><p>网件、华硕之类的高端货够强悍，玩的人也多，当然价格也贵，便宜的一般都是300+，固件丰富，可玩性强。</p><p>这里需要说明一下，不是所有的品牌、所有型号都是支持刷机的，购买前请google一下，否则买了没有用很是尴尬。</p><h4 id="“免费”路由"><a href="#“免费”路由" class="headerlink" title="“免费”路由"></a>“免费”路由</h4><p>注意：&gt;免费是有引号的</p><p>互联网金融（就是放高利贷的）很火爆，催生了斐讯之类的“免费”路由，XXX块买个路由，等X月后从金融平台提现，相当于免费。</p><p>目前，斐讯又推出了K3了，感觉很不靠谱。┑(￣Д ￣)┍</p><p>由于这种路由相当火爆，求固件的人很多，所以基本有一条龙刷固件的方式。</p><p>！经过网友爆料，斐讯自带的固件有后门，会窃取用户信息，如果不是用v6,单纯用v4的同学也请注意一下。浪费点时间刷固件，还是个人信息被偷，你高兴就好。</p><p><strong>更新1.0</strong>：之前有斐讯官改固件强制升级的，建议避免使用官改。另，斐讯这样的模式已经GG了，K2P能卖200+，我也很疑惑，大概是固件多吧。</p><h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>我自己用过最新的openwrt、padavan恩山论坛改版的、openwrt明月永在，都是支持IPV6的。目前使用的是第二个。</p><p>具体折腾需要自己操作哈，我给出我的参考。</p><p>网线从墙上接到lan口，找另外一根网线，一端接在wan，一端接在lan（因为连上路由后，能正常使用SS/softether，但是不能访问六维等网站，这个方法是别人的，很好用。但是这样就只能用软件连接vps了，而不能使用路由内置的脚本，so sad）.</p><p>至于设定，在ipv6选项里面开启dhcp6native，v6的硬件加速可以开。DNS自动获取就好。wlan的设定同普通路由。其他一些脚本功能，可以自己琢磨，用好了有大用处。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果你只用vps，不用电信之类的宽带，一个路由是必要的（美服、日服、港服什么的更方便了，还不强行防火墙，何必用电信和几十一个月的加速器呢），对功能不追求很多的话，基础款————diy的或者“免费”的就好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;继上一篇解决校园网使用ipv6冲浪的文章后，路由成为了一个新的问题。普通路由一般是不支持IPV6或者不支持IPV6穿透的，所以我基于我的网络环境说说我的方法吧。&lt;/p&gt;
&lt;p&gt;首先，我的端口是校园网的（废话），支持V4/V6，V4需要进行网页登陆认证（dr.com），V6则不需要。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://soacg.pp.ua/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="路由" scheme="https://soacg.pp.ua/tags/%E8%B7%AF%E7%94%B1/"/>
    
    <category term="ipv6" scheme="https://soacg.pp.ua/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>为学医的同学推荐几个应用</title>
    <link href="https://soacg.pp.ua/posts/29019/"/>
    <id>https://soacg.pp.ua/posts/29019/</id>
    <published>2017-03-17T11:32:37.000Z</published>
    <updated>2017-03-17T11:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>因本人这学期开始上解剖课了，而课本上的插图不仅是2D的，而且还是黑白的，so confusing~遂找了一下关于解剖的APP。</p><p>国产的有3DBody，国外的Visible Body做得很好，当然还有别的，但不准备找了。</p><p>3DBody没有深入使用过，借了同学的手机来用了一下，骨骼没有质感，功能也不够丰富，而看别人的评论，说缺少一些部分，遂放弃。</p><p>下面就是关于Visible Body的了。</p><p>平台：iOS/Android/PC/Mac<br>（iPad才是绝配啊，可惜真的没钱）</p><p>价格：大概每款都是25刀吧</p><p>所以这里的就是开心版了，只有安卓最新版本和PC的2014年的版本            （PC的真的是找不到了）</p><p>打折后宝宝买了一份windows版本的，中文支持度很好，但感觉界面就是照搬ipad的。。。</p><p><strong>更新1.0</strong>：在ios端，大家可以在AppStore里面看到最新版本号，然后在谷歌搜索就好了，有很多共享账号的，当然你也可以在淘宝咸鱼拼多多去买共享账号，只是下载了就不会包更新。不如等到打折几块钱自己买。</p><a id="more"></a><h3 id="Android-Human-Anatomy-Atlas"><a href="#Android-Human-Anatomy-Atlas" class="headerlink" title="(Android)Human Anatomy Atlas"></a>(Android)Human Anatomy Atlas</h3><p>版本：2017.1.39        支持简体中文     （患者宣传动画无法解锁，我手机显示了购买，然而打不开动画）</p><p>有模型，有小视频，动图，测试，功能很全面。</p><div align=center><img src="http://i.imgur.com/VXkYWJ1.jpg" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/DpXZwB8.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/f5Q8Air.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/TkVKzAo.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/dzIjGrN.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/XoFQIBM.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/c2kBoKK.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/Sir43xT.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/7Yff7yq.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/gOPg84I.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/84GgXr4.png" width="270" height="480"/></div><h3 id="Android-Muscle-Premium"><a href="#Android-Muscle-Premium" class="headerlink" title="(Android)Muscle Premium"></a>(Android)Muscle Premium</h3><p>版本：6.1.31        支持简体中文</p><div align=center><img src="http://i.imgur.com/1RnEC1M.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/FrK5yeS.png" width="270" height="480"/></div><div align=center><img src="http://i.imgur.com/sFKvPhV.jpg" width="270" height="480"/></div><h3 id="Android-Anatomy-and-Physiology"><a href="#Android-Anatomy-and-Physiology" class="headerlink" title="(Android)Anatomy and Physiology"></a>(Android)Anatomy and Physiology</h3><p>版本：4.1.16        支持简体中文</p><p>生理部分很形象，如果我高中能有这款应用该多好。</p><div align=center><img src="http://i.imgur.com/zxXPBTz.png" width="480" height="270"/></div><div align=center><img src="http://i.imgur.com/7al5lyE.jpg" width="480" height="270"/></div><div align=center><img src="http://i.imgur.com/VLCp0lw.jpg" width="480" height="270"/></div><div align=center><img src="http://i.imgur.com/zgSdKDT.png" width="480" height="270"/></div><h3 id="PC-Human-Anatomy-Atlas"><a href="#PC-Human-Anatomy-Atlas" class="headerlink" title="(PC)Human Anatomy Atlas"></a>(PC)Human Anatomy Atlas</h3><p>版本：3.0.1        英文</p><p>这个就不截图了，旧版的不如不用，直接买正版多好。</p><p>但我还是上传了，有一定的参考价值。</p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>1.安装APK文件</p><p>2.解压压缩包</p><p>3.把压缩包转移到  /android/obb 里面（文件夹也一起哦，有的话就覆盖）</p><p>4.阅读应用内说明</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>百度，嗯，和谐了可以留个言。</p><p>链接: <a href="https://pan.baidu.com/s/1jImfgeq">https://pan.baidu.com/s/1jImfgeq</a> 密码: ejun</p><p>以上是过时的了，更新的我就不上传网盘了，<a href="https://isavetube.com/a2zapk/?id=168337">链接在这</a>。 顺带前几天有0.99刀的Google Play的特价，垃圾浦发不让我买。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因本人这学期开始上解剖课了，而课本上的插图不仅是2D的，而且还是黑白的，so confusing~遂找了一下关于解剖的APP。&lt;/p&gt;
&lt;p&gt;国产的有3DBody，国外的Visible Body做得很好，当然还有别的，但不准备找了。&lt;/p&gt;
&lt;p&gt;3DBody没有深入使用过，借了同学的手机来用了一下，骨骼没有质感，功能也不够丰富，而看别人的评论，说缺少一些部分，遂放弃。&lt;/p&gt;
&lt;p&gt;下面就是关于Visible Body的了。&lt;/p&gt;
&lt;p&gt;平台：iOS/Android/PC/Mac&lt;br&gt;（iPad才是绝配啊，可惜真的没钱）&lt;/p&gt;
&lt;p&gt;价格：大概每款都是25刀吧&lt;/p&gt;
&lt;p&gt;所以这里的就是开心版了，只有安卓最新版本和PC的2014年的版本            （PC的真的是找不到了）&lt;/p&gt;
&lt;p&gt;打折后宝宝买了一份windows版本的，中文支持度很好，但感觉界面就是照搬ipad的。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新1.0&lt;/strong&gt;：在ios端，大家可以在AppStore里面看到最新版本号，然后在谷歌搜索就好了，有很多共享账号的，当然你也可以在淘宝咸鱼拼多多去买共享账号，只是下载了就不会包更新。不如等到打折几块钱自己买。&lt;/p&gt;</summary>
    
    
    
    <category term="应用" scheme="https://soacg.pp.ua/categories/%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="app" scheme="https://soacg.pp.ua/tags/app/"/>
    
    <category term="安卓" scheme="https://soacg.pp.ua/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="福利" scheme="https://soacg.pp.ua/tags/%E7%A6%8F%E5%88%A9/"/>
    
    <category term="医学" scheme="https://soacg.pp.ua/tags/%E5%8C%BB%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Got something to say</title>
    <link href="https://soacg.pp.ua/posts/36450/"/>
    <id>https://soacg.pp.ua/posts/36450/</id>
    <published>2017-03-02T17:59:16.000Z</published>
    <updated>2017-03-02T17:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Obv,这是个博客啦。好不容易又有了博客，之前的两个已经找不到了，现在这个在GitHub上面，应该倒是不至于被收回了。</p><p>然后，准备用博客记录些东西，都是自己感兴趣的。</p><a id="more"></a><p>未来的博客呢，应该是有几个阶段的。</p><h3 id="Stage-0-备忘-Memo"><a href="#Stage-0-备忘-Memo" class="headerlink" title="Stage 0 备忘 Memo"></a>Stage 0 备忘 Memo</h3><p>呃，虽然看起来有点奇怪，但我记忆不是很好，还是需要一个载体来记载我的杂七杂八的想法。以免以后回忆过去的时候什么都记不起来了。</p><h3 id="Stage-1-摄取-Intake"><a href="#Stage-1-摄取-Intake" class="headerlink" title="Stage 1 摄取 Intake"></a>Stage 1 摄取 Intake</h3><p>此阶段主要在于搜集各种知识，毕竟个人的成长就是知识搜集的过程。为了绿色节能环保等各种名义，勉强就用打字来替代了。</p><h3 id="Stage-2-整理-Settle"><a href="#Stage-2-整理-Settle" class="headerlink" title="Stage 2 整理 Settle"></a>Stage 2 整理 Settle</h3><p>吸收、消化所搜集的知识。自然界是有能量传递效率的，可如若于知识的话，不应该局限于100%。自当最大限度地去学习与超越。</p><h3 id="Stage-3-输出-Output"><a href="#Stage-3-输出-Output" class="headerlink" title="Stage 3 输出 Output"></a>Stage 3 输出 Output</h3><p>兴趣的实质是不懈的追求，而乐趣却是在过程之中获得的，结果不是很重要。于巴菲特、盖茨等富豪，做善事，是致力于世界的公平，可在互联网这个地方，并没有现实之中的阶级、贫富之分，公平与分享是其精神。每个人都有这个权利去获取相应的信息。对知识丰富的人，传播知识本就是发扬并传播互联网精神。而对个人而言，木桶满则溢，溢出的则是相对于旧知识的新知识。win-win很美好，至少在此它应该存在。</p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>由于自己尚且未摸清hexo的全部玩法，经常会GG掉，所以博客有什么奇怪的，都是正常现象。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Obv,这是个博客啦。好不容易又有了博客，之前的两个已经找不到了，现在这个在GitHub上面，应该倒是不至于被收回了。&lt;/p&gt;
&lt;p&gt;然后，准备用博客记录些东西，都是自己感兴趣的。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://soacg.pp.ua/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
</feed>
